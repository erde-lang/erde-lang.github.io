"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[435],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(a),k=i,c=m["".concat(d,".").concat(k)]||m[k]||u[k]||l;return a?n.createElement(c,r(r({ref:t},p),{},{components:a})):n.createElement(c,r({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5458:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const l={},r="Changelog",o={unversionedId:"changelog",id:"changelog",title:"Changelog",description:"Format based on Keep a Changelog.",source:"@site/src/docs/changelog.md",sourceDirName:".",slug:"/changelog",permalink:"/changelog",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Playground",permalink:"/playground"}},d={},s=[{value:"1.0.0-1 - August 11, 2023",id:"100-1---august-11-2023",level:2},{value:"Changed",id:"changed",level:3},{value:"Fixed",id:"fixed",level:3},{value:"Added",id:"added",level:3},{value:"0.6.0-1 - June 16, 2023",id:"060-1---june-16-2023",level:2},{value:"Changed",id:"changed-1",level:3},{value:"Fixed",id:"fixed-1",level:3},{value:"Added",id:"added-1",level:3},{value:"0.5.0-1 - April 01, 2023",id:"050-1---april-01-2023",level:2},{value:"Removed",id:"removed",level:3},{value:"Changed",id:"changed-2",level:3},{value:"Fixed",id:"fixed-2",level:3},{value:"Added",id:"added-2",level:3},{value:"0.4.0-1 - January 7, 2023",id:"040-1---january-7-2023",level:2},{value:"Changed",id:"changed-3",level:3},{value:"Fixed",id:"fixed-3",level:3},{value:"Added",id:"added-3",level:3},{value:"0.3.0-2 - November 7, 2022",id:"030-2---november-7-2022",level:2},{value:"Removed",id:"removed-1",level:3},{value:"Changed",id:"changed-4",level:3},{value:"Fixed",id:"fixed-4",level:3},{value:"Added",id:"added-4",level:3},{value:"0.3.0-1 - August 26, 2022",id:"030-1---august-26-2022",level:2},{value:"Removed",id:"removed-2",level:3},{value:"Changed",id:"changed-5",level:3},{value:"Added",id:"added-5",level:3},{value:"0.2.0-1 - June 03, 2022",id:"020-1---june-03-2022",level:2},{value:"Removed",id:"removed-3",level:3},{value:"Changed",id:"changed-6",level:3},{value:"Fixed",id:"fixed-5",level:3},{value:"0.1.0-1 - March 3, 2022",id:"010-1---march-3-2022",level:2}],p={toc:s};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"changelog"},"Changelog"),(0,i.kt)("p",null,"Format based on ",(0,i.kt)("a",{parentName:"p",href:"https://keepachangelog.com/en/1.0.0/"},"Keep a Changelog"),"."),(0,i.kt)("p",null,"Versioning based on ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/"},"Semantic Versioning"),", with suffix\nbased on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/luarocks/luarocks/wiki/Rockspec-format"},"rockspec versioning"),"."),(0,i.kt)("h2",{id:"100-1---august-11-2023"},"[1.0.0-1]"," - August 11, 2023"),(0,i.kt)("h3",{id:"changed"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No longer allow keywords as index fields (generated invalid Lua code)"),(0,i.kt)("li",{parentName:"ul"},"Loaded compiled Lua chunks now have their source names embedded in their chunkname",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/27"},"https://github.com/erde-lang/erde/issues/27")))),(0,i.kt)("li",{parentName:"ul"},"Operator assignments no longer cause unnecessary duplicate indexing",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/29"},"https://github.com/erde-lang/erde/issues/29")),(0,i.kt)("li",{parentName:"ul"},"ex) ",(0,i.kt)("inlineCode",{parentName:"li"},"my_expensive_function().x += 1")," will now only call ",(0,i.kt)("inlineCode",{parentName:"li"},"my_expensive_function")," once."),(0,i.kt)("li",{parentName:"ul"},"ex) ",(0,i.kt)("inlineCode",{parentName:"li"},"a.b.c += 1")," will only cause ",(0,i.kt)("inlineCode",{parentName:"li"},"a")," to be indexed once."))),(0,i.kt)("li",{parentName:"ul"},"Erde now transforms variable names based on the scope they were declared with.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The most recently declared scope will always take precedence"),(0,i.kt)("li",{parentName:"ul"},"ex) ",(0,i.kt)("inlineCode",{parentName:"li"},"local x = 0; global x = 1; assert(x == 1)")))),(0,i.kt)("li",{parentName:"ul"},"Erde now throws a parsing error when declaring a destructured variable with no value (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"local { a };"),")"),(0,i.kt)("li",{parentName:"ul"},"Erde now throws a parsing error when using ",(0,i.kt)("inlineCode",{parentName:"li"},"goto")," with an undefined label (same behavior as Lua)")),(0,i.kt)("h3",{id:"fixed"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed allowing keywords as variable names"),(0,i.kt)("li",{parentName:"ul"},"Fixed compilation error for interpolation strings with only an escaped brace",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/24"},"https://github.com/erde-lang/erde/issues/24")))),(0,i.kt)("li",{parentName:"ul"},"Fixed return list failing to parse surround chars in strings",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/21"},"https://github.com/erde-lang/erde/issues/21")))),(0,i.kt)("li",{parentName:"ul"},"Fixed not being able to assign to the index of a function call result",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/26"},"https://github.com/erde-lang/erde/issues/26")))),(0,i.kt)("li",{parentName:"ul"},"Fixed parsing table string entry with only ",(0,i.kt)("inlineCode",{parentName:"li"},"="),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/28"},"https://github.com/erde-lang/erde/issues/28")))),(0,i.kt)("li",{parentName:"ul"},"Fixed compilation of function declarations with Lua keywords",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/25"},"https://github.com/erde-lang/erde/issues/25")))),(0,i.kt)("li",{parentName:"ul"},"Fixed operator precedence fighting in operator assignments",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/20"},"https://github.com/erde-lang/erde/issues/20")))),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"erde compile")," failing when parent directories are not present",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"parent directories are now created recursively as needed"))),(0,i.kt)("li",{parentName:"ul"},"Fixed mismatched names for Lua keywords when accessing ",(0,i.kt)("inlineCode",{parentName:"li"},"_G")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"_MODULE"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/18"},"https://github.com/erde-lang/erde/issues/18")))),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"module")," declarations not updating ",(0,i.kt)("inlineCode",{parentName:"li"},"_MODULE"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/22"},"https://github.com/erde-lang/erde/issues/22")))),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"continue")," generating invalid code when targeting 5.1(+)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/34"},"https://github.com/erde-lang/erde/issues/34")))),(0,i.kt)("li",{parentName:"ul"},"Fixed return lists incorrectly interpreting expression commas as list commas",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, returning an iife with a comma in the function body"))),(0,i.kt)("li",{parentName:"ul"},"Fixed mangled stacktrace for ",(0,i.kt)("inlineCode",{parentName:"li"},"bit")," library tail calls",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.freelists.org/post/luajit/Bad-stack-trace-from-lua-getstack-and-lua-getinfo,1"},"https://www.freelists.org/post/luajit/Bad-stack-trace-from-lua-getstack-and-lua-getinfo,1"))))),(0,i.kt)("h3",{id:"added"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Erde will now throw a compiler error when targeting ",(0,i.kt)("inlineCode",{parentName:"li"},"5.1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"5.1+"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"jit"),", and there are additional statements following a ",(0,i.kt)("inlineCode",{parentName:"li"},"break"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Lua 5.1 / LuaJIT do not support statements following ",(0,i.kt)("inlineCode",{parentName:"li"},"break")," (parsing error, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"return"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/34"},"https://github.com/erde-lang/erde/issues/34")))),(0,i.kt)("li",{parentName:"ul"},"Compiled files now include the Lua target at the bottom of the compiled file."),(0,i.kt)("li",{parentName:"ul"},"Added specific error checks for common mistakes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~=")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"!=")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"elseif")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"else if"))))),(0,i.kt)("h2",{id:"060-1---june-16-2023"},"[0.6.0-1]"," - June 16, 2023"),(0,i.kt)("h3",{id:"changed-1"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BREAKING CHANGE: Functions no longer default to ",(0,i.kt)("inlineCode",{parentName:"li"},"local"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Differs too much from vanilla Lua"),(0,i.kt)("li",{parentName:"ul"},"Unexpected behavior, especially for newer users"),(0,i.kt)("li",{parentName:"ul"},"More confusing than helpful"))),(0,i.kt)("li",{parentName:"ul"},"Allow excluding target from ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," (i.e. allow options table as only argument)"),(0,i.kt)("li",{parentName:"ul"},"When using the ",(0,i.kt)("inlineCode",{parentName:"li"},"module")," keyword, users can now access the module table via ",(0,i.kt)("inlineCode",{parentName:"li"},"_MODULE"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_MODULE")," is declared at the top of the module (accessible anywhere)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"module")," declarations are immediately added to the ",(0,i.kt)("inlineCode",{parentName:"li"},"_MODULE")," table")))),(0,i.kt)("h3",{id:"fixed-1"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed throwing object when failing to load compiled code"),(0,i.kt)("li",{parentName:"ul"},"Fixed erde loaders not handling multiple returns (package loader && ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.run"),")"),(0,i.kt)("li",{parentName:"ul"},"Fixed incorrect source map when code starts with newlines"),(0,i.kt)("li",{parentName:"ul"},"Fixed incorrect source map for function call statements"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.traceback")," now properly handles non-string messages",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"message is returned immediately without further processing"),(0,i.kt)("li",{parentName:"ul"},"same behavior as Lua's native ",(0,i.kt)("inlineCode",{parentName:"li"},"debug.traceback")))),(0,i.kt)("li",{parentName:"ul"},"The bitwise unary ",(0,i.kt)("inlineCode",{parentName:"li"},"~")," operator now properly uses native Lua for 5.3+ (previously always used bitlib)"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly reports error lines as compiled error lines when there is no sourcemap"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly injects the compile footer for empty files"),(0,i.kt)("li",{parentName:"ul"},"Fixed not throwing error when using both ",(0,i.kt)("inlineCode",{parentName:"li"},"return")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"module")),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," (REPL) and ",(0,i.kt)("inlineCode",{parentName:"li"},"erde run")," not respecting ",(0,i.kt)("inlineCode",{parentName:"li"},"--target")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/11"},"https://github.com/erde-lang/erde/issues/11"),")"),(0,i.kt)("li",{parentName:"ul"},"Fixed global destructuring (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/14"},"https://github.com/erde-lang/erde/issues/14"),")"),(0,i.kt)("li",{parentName:"ul"},"Global declarations now directly mutate ",(0,i.kt)("inlineCode",{parentName:"li"},"_G")," (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/15"},"https://github.com/erde-lang/erde/issues/15"),")"),(0,i.kt)("li",{parentName:"ul"},"Fixed compilation of Lua (but not Erde) keyword (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/erde-lang/erde/issues/8"},"https://github.com/erde-lang/erde/issues/8"),")"),(0,i.kt)("li",{parentName:"ul"},"Fixed greedy tokenization of ",(0,i.kt)("inlineCode",{parentName:"li"},"\\")," in block strings (error when tokenizing ",(0,i.kt)("inlineCode",{parentName:"li"},"[[\\]]"),")")),(0,i.kt)("h3",{id:"added-1"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allow passing in options in ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.compile")),(0,i.kt)("li",{parentName:"ul"},"Allow disabling caching source maps"),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"erde sourcemap")," command to CLI help")),(0,i.kt)("h2",{id:"050-1---april-01-2023"},"[0.5.0-1]"," - April 01, 2023"),(0,i.kt)("h3",{id:"removed"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BREAKING CHANGE: Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"try...catch")," statements",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pcall")," paradigm suffices, ",(0,i.kt)("inlineCode",{parentName:"li"},"try...catch")," statement in practice was not ",(0,i.kt)("em",{parentName:"li"},"that")," useful"),(0,i.kt)("li",{parentName:"ul"},"Do not want to split code styles on ",(0,i.kt)("inlineCode",{parentName:"li"},"pcall")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"try...catch")))),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"erdeXXX")," executables (",(0,i.kt)("inlineCode",{parentName:"li"},"erdejit"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"erde5.1"),", etc).",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Did not realize luarocks wraps these Lua scripts and forces their running Lua version"),(0,i.kt)("li",{parentName:"ul"},"Not as useful now that ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.load")," automatically infers the target"),(0,i.kt)("li",{parentName:"ul"},"Polluted path a little bit (lots of executables, especially when installing for multiple versions)"))),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"-d"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"--debug")," cli option")),(0,i.kt)("h3",{id:"changed-2"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Erde now allows all number forms for all Lua targets and will transpile numbers to decimal format (including newly added binary literals)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," cli no longer requires the subcommand to appear directly after ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," (flags in between are accepted)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," cli defaults ",(0,i.kt)("inlineCode",{parentName:"li"},"compile")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"clean")," args to the current directory."),(0,i.kt)("li",{parentName:"ul"},"Erde now throws an error when trying to call ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," with an invalid Lua target."),(0,i.kt)("li",{parentName:"ul"},"Erde now overrides Lua's ",(0,i.kt)("inlineCode",{parentName:"li"},"debug.traceback")," on ",(0,i.kt)("inlineCode",{parentName:"li"},"load"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Can be disabled in ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," options using ",(0,i.kt)("inlineCode",{parentName:"li"},"keep_traceback")),(0,i.kt)("li",{parentName:"ul"},"Lua's native ",(0,i.kt)("inlineCode",{parentName:"li"},"debug.traceback")," is restored when calling ",(0,i.kt)("inlineCode",{parentName:"li"},"unload")))),(0,i.kt)("li",{parentName:"ul"},"Erde now infers a version for ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," automatically based on ",(0,i.kt)("inlineCode",{parentName:"li"},"_VERSION")," when one is not specified."),(0,i.kt)("li",{parentName:"ul"},"Erde no longer catches and rethrows errors internally.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Previously used custom rethrown data type w/ ",(0,i.kt)("inlineCode",{parentName:"li"},"__tostring")," metamethod, (overcomplicated, not user friendly)"),(0,i.kt)("li",{parentName:"ul"},"Catching and rethrowing ",(0,i.kt)("em",{parentName:"li"},"changes the call stack"),". Want to avoid this, as it causes confusion when debugging."),(0,i.kt)("li",{parentName:"ul"},"Still cannot handle the case when ",(0,i.kt)("em",{parentName:"li"},"callbacks")," written in Erde but run in Lua throw errors."),(0,i.kt)("li",{parentName:"ul"},"Easier / simplest to have user handle error rewriting themselves at top level",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Often times this will be automatically handled since we override ",(0,i.kt)("inlineCode",{parentName:"li"},"debug.traceback")," on ",(0,i.kt)("inlineCode",{parentName:"li"},"load")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," cli will still rewrite errors (repl and ",(0,i.kt)("inlineCode",{parentName:"li"},"erde run"),")")))),(0,i.kt)("h3",{id:"fixed-2"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed compiling of chained function calls (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"myfunc()()"),")"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly ignores escape sequences (except interpolation) in block strings (",(0,i.kt)("inlineCode",{parentName:"li"},"[[ ... ]]"),")"),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," compile / clean checks for empty Lua files (",(0,i.kt)("inlineCode",{parentName:"li"},"is_compiled_file"),")"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly rewrites source ",(0,i.kt)("em",{parentName:"li"},"references")," in error messages (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"xxx: in function <my_erde_file.erde:174>"),")"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly checks for invalid varargs for arrow functions with implicit params"),(0,i.kt)("li",{parentName:"ul"},"Erde now properly injects the erde package loader when using the repl.")),(0,i.kt)("h3",{id:"added-2"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allow binary literals (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"print(0b100)"),") for all Lua targets."),(0,i.kt)("li",{parentName:"ul"},"Allow strings to act as index chain bases without parentheses.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ex) ",(0,i.kt)("inlineCode",{parentName:"li"},"'mystring':find('my')")))),(0,i.kt)("li",{parentName:"ul"},"Compiled files now include the version of Erde used at the bottom of the compiled file."),(0,i.kt)("li",{parentName:"ul"},"Allow specifying bitlib in ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," options"),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"sourcemap")," subcommand for debugging")),(0,i.kt)("h2",{id:"040-1---january-7-2023"},"[0.4.0-1]"," - January 7, 2023"),(0,i.kt)("h3",{id:"changed-3"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CLI options now use all lowercase (more standard)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--outDir")," is now ",(0,i.kt)("inlineCode",{parentName:"li"},"--outdir")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--bitLib")," is now ",(0,i.kt)("inlineCode",{parentName:"li"},"--bitlib")))),(0,i.kt)("li",{parentName:"ul"},"Readline history no longer saves empty lines"),(0,i.kt)("li",{parentName:"ul"},"Parser now properly checks varargs scope (cannot be used outside vararg function)")),(0,i.kt)("h3",{id:"fixed-3"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"module")," declarations with destructuring"),(0,i.kt)("li",{parentName:"ul"},"Long strings no longer throw errors for unrecognized escape chars (same behavior as Lua)"),(0,i.kt)("li",{parentName:"ul"},"Fixed determining ReturnList variants"),(0,i.kt)("li",{parentName:"ul"},"Fixed compile error when return arrow function ",(0,i.kt)("inlineCode",{parentName:"li"},"return () -> { ... }")),(0,i.kt)("li",{parentName:"ul"},"Fixed readline history not saving"),(0,i.kt)("li",{parentName:"ul"},"Fixed ambiguous iife syntax in compiled Lua (inject semicolon)"),(0,i.kt)("li",{parentName:"ul"},"CLI now checks one extra character when looking for the compiled footer comment (handle trailing newlines injected by editor)")),(0,i.kt)("h3",{id:"added-3"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added versioned executables to allow specifying the underlying lua executable version. Each additionally sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target")," appropriately.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde5.1")," - sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target 5.1")," and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"lua5.1")," executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde5.2")," - sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target 5.2")," and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"lua5.2")," executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde5.3")," - sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target 5.3")," and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"lua5.3")," executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde5.4")," - sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target 5.4")," and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"lua5.4")," executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erdejit")," - sets ",(0,i.kt)("inlineCode",{parentName:"li"},"--target jit")," and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"luajit")," executable"))),(0,i.kt)("li",{parentName:"ul"},"Any arguments following a script to be run are now accessible in the script via the ",(0,i.kt)("inlineCode",{parentName:"li"},"arg")," global (same behavior as Lua)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ex) ",(0,i.kt)("inlineCode",{parentName:"li"},'erde myscript.erde "myscript_arg1"')))),(0,i.kt)("li",{parentName:"ul"},"CLI now supports overwriting existing Lua files when compiling with ",(0,i.kt)("inlineCode",{parentName:"li"},"-f, --force")),(0,i.kt)("li",{parentName:"ul"},"CLI now supports printing compiled code instead of writing to files with ",(0,i.kt)("inlineCode",{parentName:"li"},"-p, --print")," (useful for debugging)")),(0,i.kt)("h2",{id:"030-2---november-7-2022"},"[0.3.0-2]"," - November 7, 2022"),(0,i.kt)("h3",{id:"removed-1"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Erde no longer depends on ",(0,i.kt)("a",{parentName:"li",href:"https://luarocks.org/modules/argparse/argparse"},"argparse"))),(0,i.kt)("h3",{id:"changed-4"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde run")," no longer uses a subcommand"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde compile")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"erde clean")," no longer default to cwd"),(0,i.kt)("li",{parentName:"ul"},"Improved error messages and error handling")),(0,i.kt)("h3",{id:"fixed-4"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix assignment operator compiled operation"),(0,i.kt)("li",{parentName:"ul"},"Fixed compilation error rewriting for asserts"),(0,i.kt)("li",{parentName:"ul"},"Fixed compilation of exponentiation operator for pre Lua5.3"),(0,i.kt)("li",{parentName:"ul"},"Fixed empty message when error does not have stacktrace"),(0,i.kt)("li",{parentName:"ul"},"Fixed ",(0,i.kt)("inlineCode",{parentName:"li"},"C.BITLIB")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"C.BIT_LIB")," inconsistencies"),(0,i.kt)("li",{parentName:"ul"},"Fixed empty file compilation"),(0,i.kt)("li",{parentName:"ul"},"Erde now substitutes variable names that are keywords in Lua but not in Erde (previously produced invalid Lua code)"),(0,i.kt)("li",{parentName:"ul"},"Erde now reports error lines at the start of the error (previously reported ",(0,i.kt)("em",{parentName:"li"},"after"),")"),(0,i.kt)("li",{parentName:"ul"},"Erde now correctly preserves newlines following interpolations in long strings."),(0,i.kt)("li",{parentName:"ul"},"Erde now correctly rewrites top level errors (previously always used main file source map)")),(0,i.kt)("h3",{id:"added-4"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ","_","_","tostring metamethod for thrown table errors (especially useful for sandboxed, embedded lua such as neovim)"),(0,i.kt)("li",{parentName:"ul"},"Added line numbers for errors when using ",(0,i.kt)("inlineCode",{parentName:"li"},"erde compile")),(0,i.kt)("li",{parentName:"ul"},"Added REPL support"),(0,i.kt)("li",{parentName:"ul"},"Throw error when ",(0,i.kt)("inlineCode",{parentName:"li"},"return")," statement is not the last statement in a block")),(0,i.kt)("h2",{id:"030-1---august-26-2022"},"[0.3.0-1]"," - August 26, 2022"),(0,i.kt)("h3",{id:"removed-2"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"do")," expressions."),(0,i.kt)("li",{parentName:"ul"},"Removed spread operator."),(0,i.kt)("li",{parentName:"ul"},"Removed optional chaining."),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.loader")," (replaced by ",(0,i.kt)("inlineCode",{parentName:"li"},"require('erde').load")," api)")),(0,i.kt)("h3",{id:"changed-5"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reverted split of ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"erdec")," in favor of more ",(0,i.kt)("inlineCode",{parentName:"li"},"pacman"),' like "main flags".'),(0,i.kt)("li",{parentName:"ul"},"Improved ",(0,i.kt)("inlineCode",{parentName:"li"},"erde --help")," output."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," now runs with the regular lua shebang (",(0,i.kt)("inlineCode",{parentName:"li"},"#!/usr/bin/env lua")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"#!/usr/bin/env luajit"),")")),(0,i.kt)("h3",{id:"added-5"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Erde now supports running on Lua 5.1+"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," now accepts Lua targets to compile to, with specific Lua version compatabilities"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde")," now accepts specifying a bit library to compile bit operations to"),(0,i.kt)("li",{parentName:"ul"},"Erde now generates souce maps and will rewrite errors when running scripts via the CLI or using ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.load"),"."),(0,i.kt)("li",{parentName:"ul"},"Several new apis have been added both to replace ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.loader")," and to allow for better error handling",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.rewrite")," - rewrite Lua errors using a source map. Does a best-effort\nlookup for cached source map when one is not provided"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.traceback")," - erde version of ",(0,i.kt)("inlineCode",{parentName:"li"},"debug.traceback")," w/ line rewrites"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.load")," - replacement for ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.loader"),", with an optional lua target\nas a parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.unload")," - api to remove the injected erde loader (from a previous call\nto ",(0,i.kt)("inlineCode",{parentName:"li"},"erde.load"),").")))),(0,i.kt)("h2",{id:"020-1---june-03-2022"},"[0.2.0-1]"," - June 03, 2022"),(0,i.kt)("h3",{id:"removed-3"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"self")," shorthand ",(0,i.kt)("inlineCode",{parentName:"li"},"$"),". Completely unnecessary and confusing."),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," keyword. Completely unnecessary and confusing."),(0,i.kt)("li",{parentName:"ul"},"Removed ternary / null coalescing operator",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ternary created ambiguous syntax (",(0,i.kt)("inlineCode",{parentName:"li"},"a ? b:c() : d()")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"a ? b : c():d()"),")"),(0,i.kt)("li",{parentName:"ul"},"Both difficult to optimize (requires iife)")))),(0,i.kt)("h3",{id:"changed-6"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Refactored internal structure (now cleaner / faster)"),(0,i.kt)("li",{parentName:"ul"},"Erde now uses a newline to differentiate syntax ambiguity"),(0,i.kt)("li",{parentName:"ul"},"Erde no longer parses number destruct aliases as valid syntax"),(0,i.kt)("li",{parentName:"ul"},"Varargs now spreads when used as a table or param expression."),(0,i.kt)("li",{parentName:"ul"},"Erde no longer allows trailing commas in Return expressions unless parentheses are present"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"erde.loader")," no longer mutates the global require function, but uses ",(0,i.kt)("inlineCode",{parentName:"li"},"package.loaders")," (as it should)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"catch")," var no longer uses parentheses (more lua like)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"catch")," var can now be a destructure"),(0,i.kt)("li",{parentName:"ul"},"Array destructures can no longer be nested inside map destructures"),(0,i.kt)("li",{parentName:"ul"},"String interpolation is no longer supported for single quote strings"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," executable has been split into ",(0,i.kt)("inlineCode",{parentName:"li"},"erde")," (interpreter) and ",(0,i.kt)("inlineCode",{parentName:"li"},"erdec")," (compiler)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"argparse")," does not allow arguments if subcommands are used, which means we\ncould not do: ",(0,i.kt)("inlineCode",{parentName:"li"},"erde myfile.erde")," to run a file. This was very unfriendly to\nscripts that may want to use a shebang with ",(0,i.kt)("inlineCode",{parentName:"li"},"erde"),"."),(0,i.kt)("li",{parentName:"ul"},"Use a similar structure as moonscript for familiarity.")))),(0,i.kt)("h3",{id:"fixed-5"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tokenizer now correctly consumes whitespace in string interpolation."),(0,i.kt)("li",{parentName:"ul"},"String interpolation w/ names now compiles correctly."),(0,i.kt)("li",{parentName:"ul"},"Parenthesized Return now parses correctly."),(0,i.kt)("li",{parentName:"ul"},"Keywords are now allowed as named index chains (ex: x.if, y:else())."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"!=")," operator is now ",(0,i.kt)("em",{parentName:"li"},"actually")," compiled."),(0,i.kt)("li",{parentName:"ul"},"OptChain now correctly parses optional ",(0,i.kt)("em",{parentName:"li"},"method")," calls"),(0,i.kt)("li",{parentName:"ul"},"Fixed void ",(0,i.kt)("inlineCode",{parentName:"li"},"return")," (i.e. no expressions)"),(0,i.kt)("li",{parentName:"ul"},"Parser / compiler no longer crash when the ast is empty")),(0,i.kt)("h2",{id:"010-1---march-3-2022"},"[0.1.0-1]"," - March 3, 2022"),(0,i.kt)("p",null,"Initial Release"))}u.isMDXComponent=!0}}]);