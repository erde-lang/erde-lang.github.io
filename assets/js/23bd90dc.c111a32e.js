"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[870],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),d=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=d(e.components);return n.createElement(p.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,g=u["".concat(p,".").concat(m)]||u[m]||s[m]||i;return t?n.createElement(g,o(o({ref:r},c),{},{components:t})):n.createElement(g,o({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7306:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=t(7462),a=(t(7294),t(3905));const i={},o="Error Rewriting",l={unversionedId:"error-rewriting",id:"error-rewriting",title:"Error Rewriting",description:"When running Erde code directly (either via erde.load or the CLI), runtime",source:"@site/src/docs/error-rewriting.md",sourceDirName:".",slug:"/error-rewriting",permalink:"/error-rewriting",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"},next:{title:"API",permalink:"/api"}},p={},d=[{value:"Package Loader Error Rewriting",id:"package-loader-error-rewriting",level:3},{value:"CLI Error Rewriting",id:"cli-error-rewriting",level:3}],c={toc:d};function s(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-rewriting"},"Error Rewriting"),(0,a.kt)("p",null,"When running Erde code directly (either via ",(0,a.kt)("inlineCode",{parentName:"p"},"erde.load")," or the CLI), runtime\nerrors will report line numbers and file names for the ",(0,a.kt)("em",{parentName:"p"},"compiled Lua code"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erde",metastring:"title=myfile.erde",title:"myfile.erde"},"print('a' + 1)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:"title=stdout",title:"stdout"},"[string \"erde::1::test.erde\"]:3: attempt to add a 'string' with a 'number'\nstack traceback:\n    [C]: in metamethod 'add'\n    [string \"erde::1::test.erde\"]:3: in main chunk\n    (...tail calls...)\n    [C]: in ?\n")),(0,a.kt)("p",null,"In order to report references back to the original Erde file, we need to rewrite\nthe error. Erde originally tried to handle error rewriting automatically,\nbut this has many shortcomings:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"It's not clear whether to use ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.rewrite")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.traceback"),", as\nthe former is more suitable for errors meant to be caught, but the latter\nis more suitable if the error is allowed to propogate."),(0,a.kt)("li",{parentName:"ol"},"Errors may be rewritten multiple times, causing misleading stacktraces."),(0,a.kt)("li",{parentName:"ol"},"Throwing rewritten errors affects users wanting to use ",(0,a.kt)("inlineCode",{parentName:"li"},"xpcall"),' themselves,\nsince the stack will only "unwind" from the point that the error was\nrethrown, rather than from the point of the original error.'),(0,a.kt)("li",{parentName:"ol"},"It's very difficult to handle the case where an error-prone function is\ndeclared in Erde, but called in Lua.")),(0,a.kt)("p",null,"There were multiple attempts to overcome these, but every solution had major\nflaws. Thus, to keep things simple and transparent, error rewriting is delegated\nto the user."),(0,a.kt)("admonition",{title:"IMPORTANT",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Erde leaves it up to the user to properly handle error rewriting."),(0,a.kt)("p",{parentName:"admonition"},"Users will generally want to use ",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.5.html"},(0,a.kt)("inlineCode",{parentName:"a"},"xpcall")),"\nwith ",(0,a.kt)("a",{parentName:"p",href:"/api#erderewrite"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.rewrite"))," or ",(0,a.kt)("a",{parentName:"p",href:"/api#erdetraceback"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.traceback")),"\nat the top level they wish to rewrite errors. For example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=init.lua",title:"init.lua"},"local erde = require('erde')\nerde.load()\n\nlocal ok, result = xpcall(function()\n  require('my_erde_entry')\nend, erde.rewrite)\n\nif not ok then\n  error(result)\nend\n"))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you are using the CLI (",(0,a.kt)("inlineCode",{parentName:"p"},"erde run"),"), you probably do not need to manually\nhandle error rewriting. See ",(0,a.kt)("a",{parentName:"p",href:"#cli-error-rewriting"},"below"),".")),(0,a.kt)("h3",{id:"package-loader-error-rewriting"},"Package Loader Error Rewriting"),(0,a.kt)("p",null,"When using the Erde package loader (",(0,a.kt)("a",{parentName:"p",href:"/api#erdeload"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.load")),"), Lua's native\n",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,a.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nfunction will be replaced with ",(0,a.kt)("a",{parentName:"p",href:"/api#erdetraceback"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.traceback")),", a wrapper\nthat handles error rewriting."),(0,a.kt)("p",null,"However, ",(0,a.kt)("em",{parentName:"p"},"this only handles cases where ",(0,a.kt)("inlineCode",{parentName:"em"},"debug.traceback")," would be called"),". For\nexample, if a user explicitly calls ",(0,a.kt)("inlineCode",{parentName:"p"},"error('my error')"),", the error will ",(0,a.kt)("em",{parentName:"p"},"not"),"\nbe rewritten."),(0,a.kt)("h3",{id:"cli-error-rewriting"},"CLI Error Rewriting"),(0,a.kt)("p",null,"When running Erde files directly from the CLI (",(0,a.kt)("inlineCode",{parentName:"p"},"erde run xxx.erde"),"), any top\nlevel errors will be rewritten before printing to stdout. Additionally, since\n",(0,a.kt)("inlineCode",{parentName:"p"},"erde run")," calls ",(0,a.kt)("a",{parentName:"p",href:"/api#erdeload"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.load"))," internally, ",(0,a.kt)("inlineCode",{parentName:"p"},"debug.traceback")," will\nalso be overridden."))}s.isMDXComponent=!0}}]);