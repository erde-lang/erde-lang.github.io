"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[870],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=n.createContext({}),p=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(d.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,k=u["".concat(d,".").concat(m)]||u[m]||s[m]||i;return t?n.createElement(k,l(l({ref:r},c),{},{components:t})):n.createElement(k,l({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var d in r)hasOwnProperty.call(r,d)&&(o[d]=r[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7306:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=t(7462),a=(t(7294),t(3905));const i={},l="Error Rewriting",o={unversionedId:"error-rewriting",id:"error-rewriting",title:"Error Rewriting",description:"Since Erde code compiles to Lua, runtime errors will report line numbers and",source:"@site/src/docs/error-rewriting.md",sourceDirName:".",slug:"/error-rewriting",permalink:"/error-rewriting",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"},next:{title:"API",permalink:"/api"}},d={},p=[{value:"Overriding <code>debug.traceback</code>",id:"overriding-debugtraceback",level:3},{value:"CLI (<code>erde run</code>)",id:"cli-erde-run",level:3},{value:"Example",id:"example",level:2}],c={toc:p};function s(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-rewriting"},"Error Rewriting"),(0,a.kt)("p",null,"Since Erde code compiles to Lua, runtime errors will report line numbers and\nfile names for the ",(0,a.kt)("em",{parentName:"p"},"compiled Lua code"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erde",metastring:"title=myfile.erde",title:"myfile.erde"},"print('a' + 1)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:"title=stdout",title:"stdout"},"[string \"__erde_source_1__\"]:5: attempt to add a 'string' with a 'number'\nstack traceback:\n    [C]: in metamethod 'add'\n    [string \"__erde_source_1__\"]:5: in main chunk\n    (...tail calls...)\n    [C]: in ?\n")),(0,a.kt)("p",null,"In order to report references back to the original Erde file, we need to rewrite\nthe error."),(0,a.kt)("admonition",{title:"IMPORTANT",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Erde leaves it up the user to properly handle error rewriting and\nprovides the ",(0,a.kt)("a",{parentName:"p",href:"/api#erderewrite"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.rewrite"))," and ",(0,a.kt)("a",{parentName:"p",href:"/api#erdetraceback"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.traceback")),"\nfunctions to do so. This means that users should use ",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.5.html"},(0,a.kt)("inlineCode",{parentName:"a"},"xpcall")),"\nwith ",(0,a.kt)("inlineCode",{parentName:"p"},"erde.rewrite")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"erde.traceback")," at the top level they wish to rewrite errors:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-erde",metastring:"title=myfile.erde",title:"myfile.erde"},"local ok, result = xpcall(() -> {\n  print('a' + 1)\n}, require('erde').rewrite)\n\nif !ok {\n  error(result)\n}\n")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-txt",metastring:"title=stdout",title:"stdout"},"erde: myfile.erde:1: attempt to add a 'string' with a 'number'\nstack traceback:\n    [C]: in metamethod 'add'\n    myfile.erde:1: in main chunk\n    (...tail calls...)\n    [C]: in ?\n"))),(0,a.kt)("p",null,"Erde originally tried to handle all error rewriting automatically by wrapping\nthe Erde package loader with ",(0,a.kt)("inlineCode",{parentName:"p"},"xpcall")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"erde.rewrite")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"erde.traceback"),".\nHowever, this turned out to have a lot of shortcomings:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It's not clear whether to use ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.rewrite")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.traceback"),". Most of the\ntime, we want ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.traceback")," if the error propogates all the way to the\ntop, but ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.rewrite")," if we want to catch the error ourselves."),(0,a.kt)("li",{parentName:"ul"},"Deeply nested errors will be rewritten multiple times (since we are\nconstantly catching and rethrowing rewritten errors). Using ",(0,a.kt)("inlineCode",{parentName:"li"},"erde.traceback"),"\nin this case potentially causes duplicate stacktraces at every level."),(0,a.kt)("li",{parentName:"ul"},"Injecting our own ",(0,a.kt)("inlineCode",{parentName:"li"},"xpcall")," requires us to ",(0,a.kt)("em",{parentName:"li"},"change the call stack"),". Since we\nare catching and rethrowing errors, users wanting to use ",(0,a.kt)("inlineCode",{parentName:"li"},"xpcall")," themselves\nbefore the stack unwinds will only get to do so from the point that we\nrethrew the error."),(0,a.kt)("li",{parentName:"ul"},"This still does not handle the case where an error-prone function is\ndeclared in Erde, but only run after the module has been loaded.")),(0,a.kt)("p",null,"There were multiple attempts to overcome these, but every solution had major\nflaws, not to mention somewhat confusing and overcomplicated behaviors. Thus,\nto keep things simple and transparent, error rewriting is simply delegated to\nthe user."),(0,a.kt)("p",null,"However, besides providing helper functions, Erde makes some extra attempts to\nease error rewriting:"),(0,a.kt)("h3",{id:"overriding-debugtraceback"},"Overriding ",(0,a.kt)("inlineCode",{parentName:"h3"},"debug.traceback")),(0,a.kt)("p",null,"When using the Erde package loader (",(0,a.kt)("a",{parentName:"p",href:"/api#erdeload"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.load")),"), Lua's native\n",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,a.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nfunction will be replaced with ",(0,a.kt)("a",{parentName:"p",href:"/api#erdetraceback"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.traceback")),", a wrapper\nthat handles error rewriting."),(0,a.kt)("p",null,"However, ",(0,a.kt)("em",{parentName:"p"},"this only handles cases where ",(0,a.kt)("inlineCode",{parentName:"em"},"debug.traceback")," would be called"),". For\nexample, if a user explicitly calls ",(0,a.kt)("inlineCode",{parentName:"p"},"error('my error')"),", the error will ",(0,a.kt)("em",{parentName:"p"},"not"),"\nbe rewritten."),(0,a.kt)("h3",{id:"cli-erde-run"},"CLI (",(0,a.kt)("inlineCode",{parentName:"h3"},"erde run"),")"),(0,a.kt)("p",null,"When running Erde files directly from the CLI (ex. ",(0,a.kt)("inlineCode",{parentName:"p"},"erde run my_erde_file.erde"),"),\nany top level errors will be rewritten before printing to stdout. Additionally,\nsince ",(0,a.kt)("inlineCode",{parentName:"p"},"erde run")," calls ",(0,a.kt)("a",{parentName:"p",href:"/api#erdeload"},(0,a.kt)("inlineCode",{parentName:"a"},"erde.load"))," internally, ",(0,a.kt)("inlineCode",{parentName:"p"},"debug.traceback"),"\nwill also be overridden."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"The following is taken from my personal ",(0,a.kt)("a",{parentName:"p",href:"https://neovim.io/"},"NeoVim")," config.\nThe combination of both ",(0,a.kt)("inlineCode",{parentName:"p"},"xpcall")," and the overridden ",(0,a.kt)("inlineCode",{parentName:"p"},"debug.traceback")," is enough\nto handle errors both during ",(0,a.kt)("inlineCode",{parentName:"p"},"require"),", as well as in callbacks (such as keymappings)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=nvim/init.lua",title:"nvim/init.lua"},"local erde = require('erde')\nerde.load()\n\nlocal ok, result = xpcall(function()\n  require('rc') -- 'rc.erde' is my Erde entrypoint\nend, erde.rewrite)\n\nif not ok then\n  error(result)\nend\n")))}s.isMDXComponent=!0}}]);