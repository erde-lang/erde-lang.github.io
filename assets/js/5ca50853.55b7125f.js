"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[9589],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,l(l({ref:n},u),{},{components:t})):r.createElement(g,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},44077:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],o={slug:"/",sidebar_position:1},c="Getting Started",s={unversionedId:"installation",id:"installation",title:"Getting Started",description:"Installation",source:"@site/src/docs/installation.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",sidebar_position:1},sidebar:"sidebar",next:{title:"Breaking Changes w/ Lua",permalink:"/docs/breaking-changes-lua"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Running Programs",id:"running-programs",level:2},{value:"Compiling Programs",id:"compiling-programs",level:2},{value:"Cleaning Projects",id:"cleaning-projects",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"The recommended way to install is through ",(0,i.kt)("a",{parentName:"p",href:"https://luarocks.org/modules/bsuth/erde"},"luarocks"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"luarocks install erde\n")),(0,i.kt)("p",null,"Alternatively you can clone the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/erde-lang/erde"},"repo")," and\nupdate your PATH and ",(0,i.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.1.html"},"LUA_PATH")," accordingly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/erde-lang/erde.git\nERDE_ROOT="$(pwd)/erde"\nexport PATH="$ERDE_ROOT/bin:$PATH"\nexport LUA_PATH="$ERDE_ROOT/?/init.lua;$LUA_PATH"\n')),(0,i.kt)("p",null,"You can check whether Erde is installed correctly by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"erde -v\n")),(0,i.kt)("h2",{id:"running-programs"},"Running Programs"),(0,i.kt)("p",null,"Create an Erde file, which uses the ",(0,i.kt)("inlineCode",{parentName:"p"},".erde")," extension:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"touch fibonacci.erde\n")),(0,i.kt)("p",null,"And add some code to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-erde"},"function fibonacci(n) {\n  local a, b = 0, 1\n\n  for i = 1, n {\n    a, b = b, a + b\n    print(b)\n  }\n}\n\nfibonacci(10)\n")),(0,i.kt)("p",null,"Now we can run the file from the command line using the ",(0,i.kt)("inlineCode",{parentName:"p"},"erde"),"\ncommand:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"erde fibonacci.erde\n")),(0,i.kt)("h2",{id:"compiling-programs"},"Compiling Programs"),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},".erde")," files directly is great for development, but for production code\nwe want to distribute ",(0,i.kt)("inlineCode",{parentName:"p"},".lua")," files instead. We can compile our previous file\ninto Lua using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"erde compile fibonacci.erde\n")),(0,i.kt)("p",null,"This will create a ",(0,i.kt)("inlineCode",{parentName:"p"},"fibonacci.lua")," file in the same directory. You can run the\ncompiled file with the ",(0,i.kt)("inlineCode",{parentName:"p"},"lua")," interpreter as a sanity check to make sure the\noutput is the same:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"lua fibonacci.lua\n")),(0,i.kt)("h2",{id:"cleaning-projects"},"Cleaning Projects"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},".lua")," files are generated next to their ",(0,i.kt)("inlineCode",{parentName:"p"},".erde")," counterparts in\norder to ensure ",(0,i.kt)("inlineCode",{parentName:"p"},"require")," resolutions are consistent. While this is great for\ndistribution, it clutters the directory and can feel somewhat noisy for\ndevelopment."),(0,i.kt)("p",null,"Erde keeps track of which files it has generated by injecting a special comment\nat the top of the file. This allows us to be able to clean all generated files\nusing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"erde clean\n")),(0,i.kt)("p",null,"By default this will clean all generated files in the current directory tree."),(0,i.kt)("p",null,"For the astute who may be wondering how Erde handles shebangs, Erde will inject\nthe comment ",(0,i.kt)("em",{parentName:"p"},"after")," the shebang during compilation and actually checks the first\n",(0,i.kt)("em",{parentName:"p"},"two")," lines of a file during cleaning."))}m.isMDXComponent=!0}}]);