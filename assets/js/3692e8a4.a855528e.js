"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[204],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var a=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,a,t=function(e,r){if(null==e)return{};var n,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var d=a.createContext({}),p=function(e){var r=a.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=p(e.components);return a.createElement(d.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=t,k=u["".concat(d,".").concat(m)]||u[m]||s[m]||l;return n?a.createElement(k,o(o({ref:r},c),{},{components:n})):a.createElement(k,o({ref:r},c))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9834:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),t=(n(7294),n(3905));const l={},o="API",i={unversionedId:"api",id:"api",title:"API",description:"The erde package exports various functions for programmatic usage:",source:"@site/src/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Error Rewriting",permalink:"/error-rewriting"},next:{title:"Playground",permalink:"/playground"}},d={},p=[{value:"<code>erde.load</code>",id:"erdeload",level:2},{value:"<code>erde.unload</code>",id:"erdeunload",level:2},{value:"<code>erde.compile</code>",id:"erdecompile",level:2},{value:"<code>erde.run</code>",id:"erderun",level:2},{value:"<code>erde.rewrite</code>",id:"erderewrite",level:2},{value:"<code>erde.traceback</code>",id:"erdetraceback",level:2}],c={toc:p};function s(e){let{components:r,...n}=e;return(0,t.kt)("wrapper",(0,a.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"api"},"API"),(0,t.kt)("p",null,"The ",(0,t.kt)("inlineCode",{parentName:"p"},"erde")," package exports various functions for programmatic usage:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"local erde = require('erde')\n")),(0,t.kt)("p",null,"Users should ",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"not"))," use nested Erde modules (ex. ",(0,t.kt)("inlineCode",{parentName:"p"},"erde.lib"),"), as these\nare considered private and may introduce breaking changes across any version."),(0,t.kt)("h2",{id:"erdeload"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.load")),(0,t.kt)("p",null,"Injects the Erde package loader into\n",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.1/manual.html#pdf-package.loaders"},(0,t.kt)("inlineCode",{parentName:"a"},"package.loaders")),"\n(5.1, LuaJIT) or\n",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.2/manual.html#pdf-package.searchers"},(0,t.kt)("inlineCode",{parentName:"a"},"package.searchers")),"\n(5.2+), which allows Erde modules to be loaded using Lua's ",(0,t.kt)("inlineCode",{parentName:"p"},"require")," function."),(0,t.kt)("p",null,"This function also replaces Lua's native\n",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,t.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nfunction with ",(0,t.kt)("a",{parentName:"p",href:"#erdetraceback"},(0,t.kt)("inlineCode",{parentName:"a"},"erde.traceback")),", a wrapper that handles\n",(0,t.kt)("a",{parentName:"p",href:"/error-rewriting"},"error rewriting"),". The native ",(0,t.kt)("inlineCode",{parentName:"p"},"debug.traceback")," is restored when\ncalling ",(0,t.kt)("a",{parentName:"p",href:"#erdeunload"},(0,t.kt)("inlineCode",{parentName:"a"},"erde.unload")),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"erde.load()\n\n-- Specify the Lua target. By default, this is inferred from the current Lua\n-- version (`_VERSION`)\nerde.load('5.1+')\n\n-- Specify load options.\nerde.load({\n  -- string. If specified, will be used when compiling bit operations for pre\n  -- Lua 5.3 targets.\n  bitlib = '',\n\n  -- boolean. If true, will prevent replacing Lua's native `debug.traceback`.\n  keep_traceback = false,\n\n  -- boolean. If true, source maps are not cached (less memory usage, but errors\n  -- will point to line numbers in compiled code).\n  disable_source_maps = false,\n})\n\n-- Specify Lua target and load options.\nerde.load('5.1+', {\n  bitlib = '',\n  keep_traceback = false,\n})\n")),(0,t.kt)("h2",{id:"erdeunload"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.unload")),(0,t.kt)("p",null,"Removes the Erde package loader and restores Lua's native\n",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,t.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nfunction."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"erde.unload()\n")),(0,t.kt)("h2",{id:"erdecompile"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.compile")),(0,t.kt)("p",null,"Takes a string of Erde code and returns the compiled Lua code."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"print(erde.compile([[\n  local name = 'world'\n  print(\"hello {name}!\")\n]]))\n-- local name = 'world'\n-- print(\"hello \" .. tostring(name) .. \"!\")\n\n-- Specify options\nerde.compile(\"print('hello world')\", {\n  -- string. Specify the Lua target when compiling the given source string.\n  lua_target = '5.1+',\n\n  -- string. If specified, will be used when compiling bit operations for pre\n  -- Lua 5.3 targets.\n  bitlib = '',\n\n  -- string. If specified, will be used as the source name in error messages.\n  alias = false,\n}) -- hello world!\n")),(0,t.kt)("h2",{id:"erderun"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.run")),(0,t.kt)("p",null,"Takes a string of Erde code, compiles it to Lua, then runs it and returns the result."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"print(erde.run([[\n  local name = 'world'\n  return \"hello {name}!\"\n]])) -- hello world!\n\n-- Specify options\nerde.run(\"print('hello world')\", {\n  -- string. Specify the Lua target when compiling the given source string.\n  lua_target = '5.1+',\n\n  -- string. If specified, will be used when compiling bit operations for pre\n  -- Lua 5.3 targets.\n  bitlib = '',\n\n  -- boolean. If true, source maps are not cached (less memory usage, but errors\n  -- will point to line numbers in compiled code).\n  disable_source_maps = false,\n\n  -- string. If specified, will be used as the source name in error messages.\n  alias = false,\n}) -- hello world!\n")),(0,t.kt)("h2",{id:"erderewrite"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.rewrite")),(0,t.kt)("p",null,"Takes an error string and rewrites any Erde sources using cached source maps.\nParticularly useful in combination with ",(0,t.kt)("inlineCode",{parentName:"p"},"xpcall")," to have errors point back to\nthe original ",(0,t.kt)("inlineCode",{parentName:"p"},"*.erde")," source files."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"local erde = erde\n\nerde.load()\n\nlocal ok, result = xpcall(function()\n  return require('my-erde-module')\nend, erde.rewrite)\n\nif not ok then\n  error(result)\nend\n")),(0,t.kt)("h2",{id:"erdetraceback"},(0,t.kt)("inlineCode",{parentName:"h2"},"erde.traceback")),(0,t.kt)("p",null,"A drop-in replacement of Lua's ",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,t.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nthat provides ",(0,t.kt)("a",{parentName:"p",href:"/error-rewriting"},"error rewriting")," and removes some noisy\nstacktraces from Erde internals. Often used in the same manner as\n",(0,t.kt)("a",{parentName:"p",href:"#erderewrite"},(0,t.kt)("inlineCode",{parentName:"a"},"erde.rewrite")),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},"erde.load()\n\nlocal ok, result = xpcall(function()\n  return require('my-erde-module')\nend, erde.traceback)\n\nif not ok then\n  error(result)\nend\n")),(0,t.kt)("admonition",{type:"info"},(0,t.kt)("p",{parentName:"admonition"},"When calling ",(0,t.kt)("a",{parentName:"p",href:"#erdeload"},(0,t.kt)("inlineCode",{parentName:"a"},"erde.load")),", Lua's native\n",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#pdf-debug.traceback"},(0,t.kt)("inlineCode",{parentName:"a"},"debug.traceback")),"\nfunction will be replaced with ",(0,t.kt)("inlineCode",{parentName:"p"},"erde.traceback")," to allow for automatic error\nrewriting.")))}s.isMDXComponent=!0}}]);