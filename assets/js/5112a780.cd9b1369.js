"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[963],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>d});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),p=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(r),d=t,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return r?a.createElement(f,l(l({ref:n},u),{},{components:r})):a.createElement(f,l({ref:n},u))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},814:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=r(7462),t=(r(7294),r(3905));const i={},l="Examples",o={unversionedId:"examples",id:"examples",title:"Examples",description:"Program Examples",source:"@site/src/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/examples",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"}},s={},p=[{value:"Program Examples",id:"program-examples",level:2},{value:"Fibonacci",id:"fibonacci",level:3},{value:"FizzBuzz",id:"fizzbuzz",level:3},{value:"Read-Only Tables",id:"read-only-tables",level:3},{value:"Valid Anagram",id:"valid-anagram",level:3},{value:"Feature Examples",id:"feature-examples",level:2},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Parameter Defaults",id:"parameter-defaults",level:3},{value:"Named Varargs",id:"named-varargs",level:3},{value:"Continue",id:"continue",level:3},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"Destructuring",id:"destructuring",level:3},{value:"Arrow Functions",id:"arrow-functions",level:3}],u={toc:p};function c(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"examples"},"Examples"),(0,t.kt)("h2",{id:"program-examples"},"Program Examples"),(0,t.kt)("h3",{id:"fibonacci"},"Fibonacci"),(0,t.kt)("p",null,"Computes the nth ",(0,t.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Fibonacci_number"},"Fibonacci number"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function fibonacci(n = 0) {\n  if n == 0 {\n    return 0\n  } else {\n    local a, b = 0, 1\n\n    for i = 2, n {\n      a, b = b, a + b\n    }\n\n    return b\n  }\n}\n\nprint(fibonacci(0)) -- 0\nprint(fibonacci(1)) -- 1\nprint(fibonacci(2)) -- 1\nprint(fibonacci(3)) -- 2\nprint(fibonacci(4)) -- 3\nprint(fibonacci(5)) -- 5\nprint(fibonacci(6)) -- 8\nprint(fibonacci(7)) -- 13\nprint(fibonacci(8)) -- 21\nprint(fibonacci(9)) -- 34\n")),(0,t.kt)("h3",{id:"fizzbuzz"},"FizzBuzz"),(0,t.kt)("p",null,"A simple childrens game commonly used in programming interviews\n(",(0,t.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Fizz_buzz"},"Wikipedia"),")."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"for i = 1, 100 {\n  if i % 15 == 0 {\n    print('FizzBuzz')\n  } elseif i % 3 == 0 {\n    print('Fizz')\n  } elseif i % 5 == 0 {\n    print('Buzz')\n  } else {\n    print(i)\n  }\n}\n")),(0,t.kt)("h3",{id:"read-only-tables"},"Read-Only Tables"),(0,t.kt)("p",null,"Erde port of Lua's ",(0,t.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/13.4.5.html"},"Read-Only Tables"),",\ncommonly used to illustrate the power of metatables."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function readOnly(t) {\n  return setmetatable({}, {\n    __index = t,\n    __newindex = () -> error('attempt to update a read-only table', 2)\n  })\n}\n")),(0,t.kt)("h3",{id:"valid-anagram"},"Valid Anagram"),(0,t.kt)("p",null,"Returns true if s and t are ",(0,t.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Anagram"},"anagrams"),",\notherwise false. Does not take casing into account."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function getCharCounts(str) {\n  local charCounts = {}\n\n  for i = 1, #str {\n    local char = str:sub(i,i)\n    charCounts[char] ||= 0\n    charCounts[char] += 1\n  }\n\n  return charCounts\n}\n\nfunction isAnagram(s, t) {\n  local sCharCounts = getCharCounts(s:gsub('%s+', ''))\n  local tCharCounts = getCharCounts(t:gsub('%s+', ''))\n\n  for char, count in pairs(sCharCounts) {\n    if tCharCounts[char] != count {\n      return false\n    } else {\n      tCharCounts[char] = nil\n    }\n  }\n\n  for char, count in pairs(tCharCounts) {\n    return false -- cannot have leftover chars\n  }\n\n  return true\n}\n\nprint(isAnagram('anagram', 'nag a ram')) -- true\nprint(isAnagram('binary', 'brainy')) -- true\nprint(isAnagram('new york times', 'monkeys write')) -- true\n\nprint(isAnagram('anagram', 'nag a ran')) -- false\nprint(isAnagram('binari', 'brainy')) -- false\nprint(isAnagram('new york times', 'monkeys rite')) -- false\n")),(0,t.kt)("h2",{id:"feature-examples"},"Feature Examples"),(0,t.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#assignment-operators"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"local a = 1\nprint(a) -- 1\n\na += 1\nprint(a) -- 2\n\na *= 5\nprint(a) -- 10\n")),(0,t.kt)("h3",{id:"parameter-defaults"},"Parameter Defaults"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#parameters-defaults"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function greet(message = 'hello world') {\n  print(message)\n}\n\ngreet() -- hello world\ngreet('goodbye world') -- goodbye world\n")),(0,t.kt)("h3",{id:"named-varargs"},"Named Varargs"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#varargs"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function sum(...summands) {\n  local total = 0\n\n  for i, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n\nprint(sum(1, 2, 3, 4)) -- 10\n")),(0,t.kt)("h3",{id:"continue"},"Continue"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#continue-statements"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"function printOdds(...) {\n  for _, value in ipairs({ ... }) {\n    if value % 2 == 0 {\n      continue\n    }\n\n    print(value)\n  }\n}\n\nprintOdds(1, 2, 3, 4, 5) -- 1 3 5\n")),(0,t.kt)("h3",{id:"string-interpolation"},"String Interpolation"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#strings"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"local msg = 'world'\n\nprint('hello {msg}') -- hello {msg}\nprint(\"hello {msg}\") -- hello world\nprint([[hello {msg}]]) -- hello world\n\n-- escaped brace\nprint(\"hello \\{msg}\") -- hello {msg}\n")),(0,t.kt)("h3",{id:"destructuring"},"Destructuring"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#destructuring"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"local myTable = {\n  myValue = 5,\n  'child1',\n  'child2',\n}\n\n-- map destructure\nlocal { myValue } = myTable\nprint(myValue) -- 5\n\n-- array destructure\nlocal [ firstChild, secondChild ] = myTable\nprint(firstChild) -- child1\nprint(secondChild) -- child2\n")),(0,t.kt)("h3",{id:"arrow-functions"},"Arrow Functions"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/reference#arrow-functions"},"Documentation")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"local ok, result = pcall(() -> {\n  if someCondition {\n    error('my error')\n  } else {\n    return 'no error'\n  }\n})\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-erde"},"local mypairs = t -> (next, t, nil)\n\nfor key, value in mypairs({ 'a', 'b', 'c' }) {\n  -- 1 a\n  -- 2 b\n  -- 3 c\n  print(key, value)\n}\n")))}c.isMDXComponent=!0}}]);