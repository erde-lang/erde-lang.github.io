"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[537],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(a),g=r,k=u["".concat(p,".").concat(g)]||u[g]||d[g]||l;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1844:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const l={},i="Reference",o={unversionedId:"reference",id:"reference",title:"Reference",description:"Comments",source:"@site/src/docs/reference.md",sourceDirName:".",slug:"/reference",permalink:"/reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/getting-started"},next:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"}},p={},m=[{value:"Comments",id:"comments",level:2},{value:"Basic Types",id:"basic-types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"Tables",id:"tables",level:2},{value:"Destructuring",id:"destructuring",level:3},{value:"Functions",id:"functions",level:2},{value:"Parameters Defaults",id:"parameters-defaults",level:3},{value:"Varargs",id:"varargs",level:3},{value:"Arrow Functions",id:"arrow-functions",level:3},{value:"Scopes",id:"scopes",level:2},{value:"local",id:"local",level:3},{value:"global",id:"global",level:3},{value:"module",id:"module",level:3},{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Concatenation / Length Operators",id:"concatenation--length-operators",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3},{value:"Operator Assignments",id:"operator-assignments",level:3},{value:"Logic Constructs",id:"logic-constructs",level:2},{value:"Do Block",id:"do-block",level:3},{value:"If Else",id:"if-else",level:3},{value:"For Loop",id:"for-loop",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"Repeat Until",id:"repeat-until",level:3},{value:"Continue Statements",id:"continue-statements",level:3},{value:"Goto",id:"goto",level:3},{value:"Trailing Commas",id:"trailing-commas",level:2},{value:"Semicolons",id:"semicolons",level:2},{value:"Multiple Return Parentheses",id:"multiple-return-parentheses",level:2}],s={toc:m};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reference"},"Reference"),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("p",null,"Comments are unchanged from ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.3.html"},"Lua Comments"),".\nBoth line comments and block comments are supported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- this is a single line comment\n\n--[[\n  this is a\n  block comment\n]]\n\n--[=[\n  this is a\n  block comment\n  with nested ']]'\n]=]\n")),(0,r.kt)("h2",{id:"basic-types"},"Basic Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," are unchanged from Lua."),(0,r.kt)("h3",{id:"numbers"},"Numbers"),(0,r.kt)("p",null,"Erde supports ",(0,r.kt)("em",{parentName:"p"},"all")," Lua numbers for ",(0,r.kt)("em",{parentName:"p"},"any")," Lua target\n(note that ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.1"},"Lua 5.4 numbers")," are\na superset of all previous versions). This means that you can use the following,\neven when targeting Lua 5.1+:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"print(0xA23p-4)\n")),(0,r.kt)("p",null,"Erde will transpile this at compile time into a decimal form that all major Lua\nversions can understand."),(0,r.kt)("p",null,"Erde also supports binary literals, which are denoted with a ",(0,r.kt)("inlineCode",{parentName:"p"},"0b")," prefix. These\nwill also be transpiled at compile time into decimals:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"print(0b110) -- 6\n")),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("p",null,"Strings are ",(0,r.kt)("em",{parentName:"p"},"mostly")," unchanged from ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.4.html"},"Lua strings"),".\nErde additionally allows for string interpolation inside of double quote or\nblock strings (but ",(0,r.kt)("em",{parentName:"p"},"not")," single quote strings) using braces. Braces may be\nescaped to be used literally. Escaping the end brace is optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},'local message = \'world\'\n\nprint("hello {message}") -- hello world\nprint([[hello {message}]]) -- hello world\n\n-- string interpolation is not allowed in single quote strings\nprint(\'hello {message}\') -- hello {message}\n\n-- escape for literal braces\nprint("hello \\{message\\}") -- hello {message}\n\n-- escaping the end brace is optional\nprint("hello \\{message}") -- hello {message}\n')),(0,r.kt)("p",null,"Strings may also be indexed directly without the need for extra parentheses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title=lua",title:"lua"},"local x = ('hello %s!'):format('world')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:"title=erde",title:"erde"},"local x = 'hello %s!':format('world')\n")),(0,r.kt)("h2",{id:"tables"},"Tables"),(0,r.kt)("p",null,"Tables are unchanged from ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.5.html"},"Lua tables"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local my_table = { hello = 'world', 'hello world' }\nprint(my_table.hello) -- world\nprint(my_table[1]) -- hello world\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Unlike Lua, Erde does not allow using\n",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#semicolons-in-table-constructors"},"semicolons in table constructors"),".")),(0,r.kt)("h3",{id:"destructuring"},"Destructuring"),(0,r.kt)("p",null,"Erde supports a simple form of\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring"),",\nwhich is a convenient way to extract values from a table."),(0,r.kt)("p",null,"To extract keys from a table, you may specify a list of names in braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local my_table = { hello = 'world' }\n\n-- equivalent to: `local hello = a.hello`\nlocal { hello } = my_table\n\nprint(hello) -- world\n")),(0,r.kt)("p",null,"To extract from the array section of a table, you can use brackets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local my_table = {\n  'my first index',\n  'my second index',\n}\n\n-- equivalent to:\n-- `local first = my_table[1]`\n-- `local second = my_table[2]`\nlocal [ first, second ] = my_table\n\nprint(first) -- my first index\nprint(second) -- my second index\n")),(0,r.kt)("p",null,"Destructured values may be given default values, which will be applied when\nthe destructured value is ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local my_table = {}\n\nlocal { my_nonexistent_key = 'goodbye world' } = my_table\n\nprint(my_nonexistent_key) -- goodbye world\n")),(0,r.kt)("p",null,"Destructured keys may also be given aliases. Aliases simply rename the\ndestructured field and must come before defaults:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local my_table = { hello = 'world' }\n\n-- Alias\nlocal { hello: my_hello } = my_table\nprint(my_hello) -- world\n\n-- Alias + Default\nlocal { my_nonexistent_key: my_alias = 'James Bond' } = my_table\nprint(my_nonexistent_key) -- nil\nprint(my_alias) -- James Bond\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Nested destructuring is ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"not"))," supported. This is\nintentional, as nested destructuring syntax often makes code much more cryptic\nand difficult to read.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Destructuring can be used in combination with the ",(0,r.kt)("a",{parentName:"p",href:"#module"},(0,r.kt)("inlineCode",{parentName:"a"},"module")," keyword")," to\nachieve the import / export paradigm:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function my_module_function() {\n  print('hello world')\n}\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local { my_module_function } = require('foo')\nmy_module_function() -- hello world\n"))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Functions are generally the same as ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.html"},"Lua functions"),",\nbut use braces instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Unlike Lua, ",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#function-call-parentheses"},"function calls in Erde always require parentheses"),".")),(0,r.kt)("h3",{id:"parameters-defaults"},"Parameters Defaults"),(0,r.kt)("p",null,"Erde has support for parameter defaults:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function greet(name = 'world') {\n  return 'hello ' .. name\n}\n\ngreet() -- hello world\n")),(0,r.kt)("p",null,"Since all parameters in Lua are optional, any parameter in Erde may be assigned\na default value. In particular, defaulted parameters need not come after\nnon-defaulted ones:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function sum3(a, b = 2, c) {\n  return a + b + c\n}\n\nsum3(1, nil, 3) -- 6\n")),(0,r.kt)("h3",{id:"varargs"},"Varargs"),(0,r.kt)("p",null,"Erde supports ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.2.html"},"Lua varargs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function sum(...) {\n  local summands = { ... }\n  local total = 0\n\n  for _, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,r.kt)("p",null,"Additionally, Erde allows for named varargs, which will automatically place them\ninto a table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function sum(...summands) {\n  local total = 0\n\n  for _, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,r.kt)("h3",{id:"arrow-functions"},"Arrow Functions"),(0,r.kt)("p",null,"Lua's anonymous function syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"function() ... end"),") is not valid in Erde.\nInstead, Erde opts for arrow functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local sum = (a, b) -> {\n  return a + b\n}\n")),(0,r.kt)("p",null,"Arrow functions can implicitly take ",(0,r.kt)("inlineCode",{parentName:"p"},"self")," as the first parameter by using a\nfat arrow instead of a skinny one\n(",(0,r.kt)("a",{parentName:"p",href:"https://moonscript.org/reference/#the-language/function-literals/fat-arrows"},"inspired by MoonScript"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local person = { name = 'world' }\n\nperson.introduce = () => {\n  print(self.name)\n}\n")),(0,r.kt)("p",null,"Arrow functions may also specify an expression instead of a function body. In\nthis case, the expression becomes the return value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local get_random = () -> math.random()\nprint(get_random()) -- 0.91273898151521\nprint(get_random()) -- 0.33174662440979\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When using implicit returns for a table or multiple values, wrapping parentheses\nare necessary:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- Return table (must use parentheses!)\nlocal get_random_table = () -> ({\n  a = math.random(),\n  b = math.random(),\n  c = math.random(),\n})\n\n-- Return multiple values (must use parentheses!)\nlocal get_random3 = () -> (\n  math.random(),\n  math.random(),\n)\n"))),(0,r.kt)("p",null,"The parameter parentheses are optional if there is only one parameter, as long\nas it does not have a default and is not variadic. This also works for\n",(0,r.kt)("a",{parentName:"p",href:"#destructuring"},"destructured")," parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local greet = name -> print(\"hello {name}!\")\ngreet('world')\n\n-- w/ destructuring\nlocal greet = { name } -> print(\"hello {name}!\")\ngreet({ name = 'world' })\n")),(0,r.kt)("h2",{id:"scopes"},"Scopes"),(0,r.kt)("p",null,"Scopes apply to both normal declarations and function declarations. Their syntax\nis the same as Lua, but Erde adds the additional ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," scope\nkeywords."),(0,r.kt)("h3",{id:"local"},"local"),(0,r.kt)("p",null,"Local variables are unchanged from\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua local variables"),"."),(0,r.kt)("h3",{id:"global"},"global"),(0,r.kt)("p",null,"Global variables are unchanged from\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.2.html"},"Lua global variables"),".\nHowever, variables declared w/ ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," will always index the global table (",(0,r.kt)("inlineCode",{parentName:"p"},"_G"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},'local my_var = 111\n\ndo {\n  global my_var = 222\n\n  -- Erde will automatically detect the most recent scope of the variable\n  -- `my_var`. Since `my_var` is global here, the following is equivalent to\n  -- `print(_G.my_var)`\n  print(my_var) -- 222\n}\n\n-- Now that the global `my_var` is "out of scope", Erde goes back to using the\n-- local `my_var`.\nprint(my_var) -- 111\n\n-- The global variable is still there and accessible via `_G`.\nprint(_G.my_var) -- 222\n')),(0,r.kt)("h3",{id:"module"},"module"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," keyword acts as an export statement. Any variable declared with\n",(0,r.kt)("inlineCode",{parentName:"p"},"module")," will automatically be placed into a table, which is then returned at\nthe end of the script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function echo(message) {\n  print(message)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local foo = require('foo')\nfoo.echo('hello world') -- hello world\n")),(0,r.kt)("p",null,"If you need to modify the returned table, you can access it via ",(0,r.kt)("inlineCode",{parentName:"p"},"_MODULE"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"setmetatable(_MODULE, { __index = _G })\n\nmodule x = 'hello world'\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," keyword may not be used in conjunction with a top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),",\nas the return value will be ambiguous. In this case, Erde will throw a\ncompile error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"module my_var = 0\n\n-- Error! Should Erde return `_MODULE` or `my_other_var`?\nreturn my_other_var\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," keyword conflicts with the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," function in Lua 5.1,\nwhich means the latter is unusable in Erde (although the use of Lua's ",(0,r.kt)("inlineCode",{parentName:"p"},"module"),"\nfunction is\n",(0,r.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/LuaModuleFunctionCritiqued"},"highly discouraged"),"\nanyways).")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," keyword can be used in combination with ",(0,r.kt)("a",{parentName:"p",href:"#destructuring"},"destructuring"),"\nto achieve the import / export paradigm:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function my_module_function() {\n  print('hello world')\n}\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local { my_module_function } = require('foo')\nmy_module_function() -- hello world\n"))),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("p",null,"Arithmetic operators are the same as\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.1"},"Lua arithmetic operators"),"."),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"+"),(0,r.kt)("td",{parentName:"tr",align:"left"},"addition"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 2 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"subtraction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 - 2 == -1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"unary minus"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"*"),(0,r.kt)("td",{parentName:"tr",align:"left"},"multiplication"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2 ","*"," 4 == 8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"/"),(0,r.kt)("td",{parentName:"tr",align:"left"},"division"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10 / 2 == 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"//"),(0,r.kt)("td",{parentName:"tr",align:"left"},"floor division"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10 // 4 == 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"^"),(0,r.kt)("td",{parentName:"tr",align:"left"},"exponentiation"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2 ^ 6 == 64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"%"),(0,r.kt)("td",{parentName:"tr",align:"left"},"modulo"),(0,r.kt)("td",{parentName:"tr",align:"left"},"6 % 2 == 0"))))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Floor division (",(0,r.kt)("inlineCode",{parentName:"p"},"//"),") was not introduced until Lua 5.3, but will be polyfilled\nby the compiler when necessary.")),(0,r.kt)("h3",{id:"relational-operators"},"Relational Operators"),(0,r.kt)("p",null,"Relational operators are the same as\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.4"},"Lua relational operators"),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"except for the NEQ operator")),", which uses ",(0,r.kt)("inlineCode",{parentName:"p"},"!="),". You can read more\nabout this decision ",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#neq-operator--vs-"},"here"),"."),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"=="),(0,r.kt)("td",{parentName:"tr",align:"left"},"equality"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 1 == 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"!="),(0,r.kt)("td",{parentName:"tr",align:"left"},"inequality"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 1 != 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"<"),(0,r.kt)("td",{parentName:"tr",align:"left"},"less than"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3 < 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"greater than"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 > 7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"<="),(0,r.kt)("td",{parentName:"tr",align:"left"},"less than or equal"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 >= 8, 9 >= 9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},">="),(0,r.kt)("td",{parentName:"tr",align:"left"},"greater than or equal"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 <= 11, 11 <= 11"))))),(0,r.kt)("h3",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("p",null,"Erde keeps ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.5"},"Lua's logical operators"),",\nbut changes the syntax to use symbols over keywords:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"|","|"),(0,r.kt)("td",{parentName:"tr",align:"left"},"or"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true ","|","|"," false == true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"&&"),(0,r.kt)("td",{parentName:"tr",align:"left"},"and"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true && false == false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"!"),(0,r.kt)("td",{parentName:"tr",align:"left"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"left"},"!false == true"))))),(0,r.kt)("h3",{id:"concatenation--length-operators"},"Concatenation / Length Operators"),(0,r.kt)("p",null,"Erde keeps Lua's\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.6"},"concatenation operator"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.7"},"length operator"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"print('hello ' .. 'world') -- hello world\nprint(#'hello world') -- 11\n")),(0,r.kt)("h3",{id:"bitwise-operators"},"Bitwise Operators"),(0,r.kt)("p",null,"Erde supports ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Lua's bitwise operators"),"\n(Lua 5.3+):"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"|"),(0,r.kt)("td",{parentName:"tr",align:"right"},"or"),(0,r.kt)("td",{parentName:"tr",align:"right"},"4 ","|"," 2 == 6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"&"),(0,r.kt)("td",{parentName:"tr",align:"right"},"and"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5 == 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"xor"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 ~ 5 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"~4 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},">>"),(0,r.kt)("td",{parentName:"tr",align:"right"},"right shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2 >> 1 == 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"<<"),(0,r.kt)("td",{parentName:"tr",align:"right"},"left shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2 << 1 == 4"))))),(0,r.kt)("br",null),(0,r.kt)("p",null,"Compiling bitwise operators heavily depends on the Lua target. Erde uses the\nfollowing table to determine how bit operations should be compiled:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Target"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Compilation"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Erde"),(0,r.kt)("th",{parentName:"tr",align:null},"Lua"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"jit"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"http://bitop.luajit.org/"},"LuaBitOp")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.1"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"http://bitop.luajit.org/"},"LuaBitOp")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.1+"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Requires ",(0,r.kt)("inlineCode",{parentName:"td"},"--bitlib")," flag"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('myBitLib').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.2"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.2/manual.html#6.7"},"bit32")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit32').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.2+"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Requires ",(0,r.kt)("inlineCode",{parentName:"td"},"--bitlib")," flag"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('myBitLib').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.3"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.3/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.3+"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.3/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.4"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.4+"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5"))))),(0,r.kt)("br",null),(0,r.kt)("p",null,"You may also specify your own bit library using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--bitlib")," flag in the CLI.\nThe library methods are assumed to be:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Method"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"|"),(0,r.kt)("td",{parentName:"tr",align:"right"},"or"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"&"),(0,r.kt)("td",{parentName:"tr",align:"right"},"and"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').band")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"xor"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bxor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bnot")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},">>"),(0,r.kt)("td",{parentName:"tr",align:"right"},"right shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').rshift")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"<<"),(0,r.kt)("td",{parentName:"tr",align:"right"},"left shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').lshift"))))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Trying to compile bitwise operators when targeting 5.1+ or 5.2+ ",(0,r.kt)("em",{parentName:"p"},"requires"),"\nthe use of ",(0,r.kt)("inlineCode",{parentName:"p"},"--bitlib"),'. This is because there really is no "sane" default here.\nBy far the most common bit libraries for Lua are\n',(0,r.kt)("a",{parentName:"p",href:"http://bitop.luajit.org/"},"LuaBitOp")," (only works on 5.1 and 5.2) and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.2/manual.html#6.7"},"bit32")," (only works on 5.2),\nso it is left to the developer to decide which library to use.")),(0,r.kt)("h3",{id:"operator-assignments"},"Operator Assignments"),(0,r.kt)("p",null,"All binary operators (except ",(0,r.kt)("a",{parentName:"p",href:"#relational-operators"},"Relational Operators"),")\nsupport operator assignments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local x = 4\nx += 6\nx /= 2\nprint(x) -- 5\n")),(0,r.kt)("p",null,"Similar to regular assignments, operator assignments can also perform multiple\nassignments in a single statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local x, y, z = 0, 0, 0\nx, y, z += 1, 2, 3\nprint(x, y, z) -- 1 2 3\n")),(0,r.kt)("h2",{id:"logic-constructs"},"Logic Constructs"),(0,r.kt)("h3",{id:"do-block"},"Do Block"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua do blocks"),", but with braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"do {\n  ...\n}\n")),(0,r.kt)("h3",{id:"if-else"},"If Else"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.1.html"},"Lua if-else"),", but with braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"if n > 0 {\n  ...\n} elseif n < 0 {\n  ...\n} else {\n  ...\n}\n")),(0,r.kt)("h3",{id:"for-loop"},"For Loop"),(0,r.kt)("p",null,"Same as Lua, but with braces. Both ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.4.html"},"numeric for loops"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.5.html"},"generic for loops")," are supported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- numeric for loop\nfor i = 1, 10, 1 {\n  ...\n}\n\n-- generic for loop\nfor i, v in ipairs({ 1, 2, 3 }) {\n  ...\n}\n")),(0,r.kt)("h3",{id:"while-loop"},"While Loop"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.2.html"},"Lua while loop"),", but with braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"while true {\n  ...\n}\n")),(0,r.kt)("h3",{id:"repeat-until"},"Repeat Until"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.3.html"},"Lua repeat-until"),", but with braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"repeat {\n  ...\n} until true\n")),(0,r.kt)("h3",{id:"continue-statements"},"Continue Statements"),(0,r.kt)("p",null,"Erde adds support for ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," statements, which will advance to the next\niteration of the closest looping block (",(0,r.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repeat...until"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"for i = 1, 10 {\n  if i % 2 == 0 {\n    continue\n  }\n\n  print('i is odd')\n}\n")),(0,r.kt)("h3",{id:"goto"},"Goto"),(0,r.kt)("p",null,"Erde has support for ",(0,r.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/GotoStatement"},"Lua's ",(0,r.kt)("inlineCode",{parentName:"a"},"goto")),"\n(Lua 5.2+, LuaJIT):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"goto my_jump\n\nprint('this will not be printed')\n\n::my_jump::\nprint('hello world')\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Since there is no way to polyfill ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," in Lua 5.1, trying to use ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," when\ntargeting 5.1 or 5.1+ will result in a compilation error.")),(0,r.kt)("h2",{id:"trailing-commas"},"Trailing Commas"),(0,r.kt)("p",null,"In Erde, any enclosed list (i.e. surrounded by paired tokens such as ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),")\nis allowed to have trailing commas. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function my_function(\n  my_first_long_function_parameter,\n  my_second_long_function_parameter,\n  my_third_long_function_parameter, -- trailing comma allowed!\n) {\n  print(\n    my_first_long_function_parameter,\n    my_second_long_function_parameter,\n    my_third_long_function_parameter, -- trailing comma allowed!\n  )\n}\n")),(0,r.kt)("h2",{id:"semicolons"},"Semicolons"),(0,r.kt)("p",null,"Similar to Lua, Erde supports semicolons for separating statements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local x = 4;print(x) -- 4\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In Lua, semicolons are most often used to avoid\n",(0,r.kt)("a",{parentName:"p",href:"http://lua-users.org/lists/lua-l/2009-08/msg00543.html"},"ambiguous syntax"),".\nIn Erde, ",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#significant-whitespace-for-ambiguous-syntax"},"semicolons are usually not necessary"),".")),(0,r.kt)("h2",{id:"multiple-return-parentheses"},"Multiple Return Parentheses"),(0,r.kt)("p",null,"Functions in Erde are allowed to wrap multiple returns with parentheses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function get_basic_pair_operations(a, b) {\n  return (\n    a + b,\n    a - b,\n    a * b,\n    a / b,\n  )\n}\n")))}d.isMDXComponent=!0}}]);