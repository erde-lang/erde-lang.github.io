"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[537],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1844:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={},p="Reference",s={unversionedId:"reference",id:"reference",title:"Reference",description:"This reference assumes a basic working knowledge of",source:"@site/src/docs/reference.md",sourceDirName:".",slug:"/reference",permalink:"/reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Examples",permalink:"/examples"}},d={},m=[{value:"Comments",id:"comments",level:2},{value:"Types",id:"types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"Tables",id:"tables",level:3},{value:"Declarations / Scopes",id:"declarations--scopes",level:2},{value:"local",id:"local",level:3},{value:"global",id:"global",level:3},{value:"module",id:"module",level:3},{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Concatenation / Length Operator",id:"concatenation--length-operator",level:3},{value:"Spread Operator",id:"spread-operator",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Logic Constructs",id:"logic-constructs",level:2},{value:"do",id:"do",level:3},{value:"if else",id:"if-else",level:3},{value:"for",id:"for",level:3},{value:"while",id:"while",level:3},{value:"repeat ... until",id:"repeat--until",level:3},{value:"try ... catch",id:"try--catch",level:3},{value:"continue",id:"continue",level:3},{value:"goto",id:"goto",level:3},{value:"Functions",id:"functions",level:2},{value:"Default Parameters",id:"default-parameters",level:3},{value:"Varargs",id:"varargs",level:3},{value:"Arrow Functions",id:"arrow-functions",level:3},{value:"Optional Chaining",id:"optional-chaining",level:2},{value:"Destructuring",id:"destructuring",level:2}],u={toc:m};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"reference"},"Reference"),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This reference assumes a basic working knowledge of\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/"},"Lua"),"."))),(0,l.kt)("h2",{id:"comments"},"Comments"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.3.html"},"Lua Comments")),(0,l.kt)("p",null,"Comments are unchanged from Lua. Both line comments and block comments are\nsupported."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- this is a single line comment\n\n--[[\n  this is a\n  block comment\n]]\n")),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," are unchanged from Lua."),(0,l.kt)("h3",{id:"numbers"},"Numbers"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.1"},"Lua 5.4"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.3/manual.html#3.1"},"Lua 5.3"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.2/manual.html#3.1"},"Lua 5.2"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.1/manual.html#2.1"},"Lua 5.1"),"\n(See 'numeric/numerical constant')"),(0,l.kt)("p",null,"Numbers are unchanged from Lua. However, since the syntax for numbers differs\nacross Lua 5.1 - Lua 5.4 (in particular, each version is either the same or a\nsuperset of the previous version) you should only use the syntax for the least\nsupported Lua version. If Erde detects that you are using a syntax that\nis not supported by your compilation targets, it will throw an error."),(0,l.kt)("p",null,"For example, trying to compile ",(0,l.kt)("inlineCode",{parentName:"p"},"0xA23p-4")," when targeting Lua 5.1+ will cause\ncompilation errors, since hexadecimal exponents were not added until Lua 5.2."),(0,l.kt)("h3",{id:"strings"},"Strings"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.4.html"},"Lua Strings")),(0,l.kt)("p",null,"String are ",(0,l.kt)("em",{parentName:"p"},"mostly")," unchanged from Lua. Erde additionally allows for\ninterpolation via braces when using double quote or block strings. Braces may be\nescaped to be used literally and escaping the end brace is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local msg = 'world'\n\nlocal doubleQuotes = \"hello {msg}\"\nlocal multiline = [[hello {msg}]]\n\n-- equivalent\nlocal braceLiteral1 = '\\{ 1, 2 \\}'\nlocal braceLiteral2 = '\\{ 1, 2 }'\n")),(0,l.kt)("h3",{id:"tables"},"Tables"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.5.html"},"Lua Tables")),(0,l.kt)("p",null,"Tables are unchanged from Lua, including that tables use 1-based indexing."),(0,l.kt)("p",null,"Tables also support the ",(0,l.kt)("a",{parentName:"p",href:"#spread-operator"},"Spread Operator"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\nlocal b = { ...a }\nprint(b.hello) -- world\n")),(0,l.kt)("h2",{id:"declarations--scopes"},"Declarations / Scopes"),(0,l.kt)("p",null,"Unlike Lua, all variable declarations in Erde require a scope keyword, which is\none of ",(0,l.kt)("inlineCode",{parentName:"p"},"local"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"global"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"module"),". Erde will throw an error for declarations\nthat are missing a scope."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- okay\nlocal myVar\n\n-- error! undeclared variable\nmyOtherVar = 2\n")),(0,l.kt)("p",null,"For function declarations, the scope is optional; when the scope is\nomitted, the function will default to ",(0,l.kt)("inlineCode",{parentName:"p"},"local"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- These are equivalent!\n\nfunction myFunction() { }\nlocal function myFunction() { }\n")),(0,l.kt)("h3",{id:"local"},"local"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua Local Variables")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," scope is unchanged from Lua."),(0,l.kt)("h3",{id:"global"},"global"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.2.html"},"Lua Global Variables")),(0,l.kt)("p",null,"Global variables in Erde ",(0,l.kt)("em",{parentName:"p"},"require")," the ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," keyword. Thus the following is\nno longer valid:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"MY_GLOBAL = 1\n")),(0,l.kt)("p",null,"Erde will throw an error about trying to assign a value to an undeclared\nvariable. Instead, you can use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"global MY_GLOBAL = 1\n")),(0,l.kt)("p",null,"Since Erde evaluates all variable declarations separately for each file, any\nglobals you use in one file that are declared in another will need to declared\nbefore use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},'global FOO = "foo"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"global FOO\n\nprint(FOO) -- prints: foo\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Since functions default to ",(0,l.kt)("inlineCode",{parentName:"p"},"local")," scope, global functions need to be explicitly\ndeclared as global:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"global function myGlobalFunc() {}\n")))),(0,l.kt)("h3",{id:"module"},"module"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"module")," keyword acts as an ",(0,l.kt)("inlineCode",{parentName:"p"},"export")," statement. Anything declared with the\n",(0,l.kt)("inlineCode",{parentName:"p"},"module")," scope will be placed into a table, which is then returned at the end of\nthe script. It may only occur at the top level of a module and may not be used\nin conjunction with ",(0,l.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function echo(msg) {\n  print(msg)\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local foo = require('foo')\nfoo.echo('hello world') -- prints: hello world\n")),(0,l.kt)("p",null,"Note that this keyword conflicts with the built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"module")," function in Lua 5.1,\nwhich means that the ",(0,l.kt)("inlineCode",{parentName:"p"},"module")," function is not usable in Erde (although the use\nof Lua's ",(0,l.kt)("inlineCode",{parentName:"p"},"module")," function is ",(0,l.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/LuaModuleFunctionCritiqued"},"highly discouraged"),"\nanyways)."),(0,l.kt)("h2",{id:"operators"},"Operators"),(0,l.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.1"},"Lua Arithmetic Operators")),(0,l.kt)("p",null,"Unchanged from Lua."),(0,l.kt)("center",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"+"),(0,l.kt)("td",{parentName:"tr",align:"left"},"addition"),(0,l.kt)("td",{parentName:"tr",align:"left"},"1 + 2 == 3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:"left"},"subtraction"),(0,l.kt)("td",{parentName:"tr",align:"left"},"1 - 2 == -1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unary minus"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"*"),(0,l.kt)("td",{parentName:"tr",align:"left"},"multiplication"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2 ","*"," 4 == 8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"/"),(0,l.kt)("td",{parentName:"tr",align:"left"},"division"),(0,l.kt)("td",{parentName:"tr",align:"left"},"10 / 2 == 5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"//"),(0,l.kt)("td",{parentName:"tr",align:"left"},"floor division"),(0,l.kt)("td",{parentName:"tr",align:"left"},"10 // 4 == 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"^"),(0,l.kt)("td",{parentName:"tr",align:"left"},"exponentiation"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2 ^ 6 == 64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"%"),(0,l.kt)("td",{parentName:"tr",align:"left"},"modulo"),(0,l.kt)("td",{parentName:"tr",align:"left"},"6 % 2 == 0"))))),(0,l.kt)("br",null),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Floor division (",(0,l.kt)("inlineCode",{parentName:"p"},"//"),") was not introduced until Lua 5.3, but is simple enough\nthat the compiler will polyfill it for you if necessary."))),(0,l.kt)("h3",{id:"relational-operators"},"Relational Operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.4"},"Lua Relational Operators")),(0,l.kt)("p",null,"The NEQ operator uses ",(0,l.kt)("inlineCode",{parentName:"p"},"!=")," instead of Lua's ",(0,l.kt)("inlineCode",{parentName:"p"},"~="),". This is due to the fact that\nErde supports both ",(0,l.kt)("a",{parentName:"p",href:"#bitwise-operators"},"Bitwise Operators")," as well as\n",(0,l.kt)("a",{parentName:"p",href:"#assignment-operators"},"Assignment Operators"),", which causes ambiguity on whether\n",(0,l.kt)("inlineCode",{parentName:"p"},"~=")," represents the traditional NEQ operator or the XOR assignment operator.\nBecause the bitwise operators are not used very often, I felt is was better to\nmaintain consistency with Lua here, especially since the NEQ operator has a\nvery popular alternative that is present in nearly every other programming\nlanguage."),(0,l.kt)("center",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"=="),(0,l.kt)("td",{parentName:"tr",align:"left"},"equality"),(0,l.kt)("td",{parentName:"tr",align:"left"},"1 + 1 == 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"!="),(0,l.kt)("td",{parentName:"tr",align:"left"},"inequality"),(0,l.kt)("td",{parentName:"tr",align:"left"},"1 + 1 != 3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"<"),(0,l.kt)("td",{parentName:"tr",align:"left"},"less than"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3 < 5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"greater than"),(0,l.kt)("td",{parentName:"tr",align:"left"},"9 > 7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"<="),(0,l.kt)("td",{parentName:"tr",align:"left"},"less or equal"),(0,l.kt)("td",{parentName:"tr",align:"left"},"9 >= 8, 9 >= 9")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},">="),(0,l.kt)("td",{parentName:"tr",align:"left"},"greater or equal"),(0,l.kt)("td",{parentName:"tr",align:"left"},"9 <= 11, 11 <= 11"))))),(0,l.kt)("h3",{id:"bitwise-operators"},"Bitwise Operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Lua Bitwise Operators")),(0,l.kt)("p",null,"Erde supports bitwise operators and uses the same syntax as Lua 5.3+:"),(0,l.kt)("center",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"|"),(0,l.kt)("td",{parentName:"tr",align:"left"},"or"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0b100 .","|"," 0b010 == 0b110")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"&"),(0,l.kt)("td",{parentName:"tr",align:"left"},"and"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0b110 .& 0b101 == 0b100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"~"),(0,l.kt)("td",{parentName:"tr",align:"left"},"xor"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0b110 .~ 0b101 == 0b011")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"~"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unary NOT"),(0,l.kt)("td",{parentName:"tr",align:"left"},".~0b100 == 0b011")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},">>"),(0,l.kt)("td",{parentName:"tr",align:"left"},"right shift"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0b010 .>> 1 == 0b001")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"<<"),(0,l.kt)("td",{parentName:"tr",align:"left"},"left shift"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0b010 .<< 1 == 0b100"))))),(0,l.kt)("br",null),(0,l.kt)("p",null,"When compiling to Lua 5.1 or 5.2, Erde will assume the target platform has\naccess to the ",(0,l.kt)("a",{parentName:"p",href:"http://bitop.luajit.org"},"BitOp")," module and bit operations will\ncompile down to ",(0,l.kt)("inlineCode",{parentName:"p"},"require('bit').xxx()")," calls."),(0,l.kt)("h3",{id:"logical-operators"},"Logical Operators"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.5"},"Lua Logical Operators")),(0,l.kt)("p",null,"Due to Erde favor of symbols over words, the logical operators are quite\ndifferent than Lua."),(0,l.kt)("center",null,(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"|","|"),(0,l.kt)("td",{parentName:"tr",align:"left"},"or"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true ","|","|"," false == true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"&&"),(0,l.kt)("td",{parentName:"tr",align:"left"},"and"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true && false == false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"!"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unary NOT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"!false == true"))))),(0,l.kt)("br",null),(0,l.kt)("p",null,"The unary logical NOT operator uses the ",(0,l.kt)("inlineCode",{parentName:"p"},"!")," token to maintain consistency with\nthe NEQ operator (see ",(0,l.kt)("a",{parentName:"p",href:"#relational-operators"},"Relational Operators"),")."),(0,l.kt)("h3",{id:"concatenation--length-operator"},"Concatenation / Length Operator"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.6"},"Lua Concatenation Operator")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.7"},"Lua Length Operators")),(0,l.kt)("p",null,"Unchanged from Lua."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},'print("hello" .. "world") -- helloworld\nprint(#"hello") -- 5\n')),(0,l.kt)("h3",{id:"spread-operator"},"Spread Operator"),(0,l.kt)("p",null,"Erde supports the Spread Operator, which expands table values into either\nanother table or function arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\nlocal b = { ...a }\nprint(b.hello) -- world\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"function add(a, b) {\n  return a + b\n}\n\nlocal a = { 1, 2 }\nprint(add(...a)) -- 3\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Erde changes the behavior of variadic arguments to mimic spreading for consistency.\nFor more information, check ",(0,l.kt)("a",{parentName:"p",href:"/breaking-changes-lua#spreading-varargs"},"Spreading Varargs")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Key, value pairs are ignored when spreading into function arguments."))),(0,l.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,l.kt)("p",null,"All binary operators (except of course ",(0,l.kt)("a",{parentName:"p",href:"#relational-operators"},"Relational Operators"),")\nsupport assignment operator shorthands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local x = 4\nx += 6\nx /= 2\nprint(x) -- prints: 5\n")),(0,l.kt)("h2",{id:"logic-constructs"},"Logic Constructs"),(0,l.kt)("p",null,"All logic constructs in Lua (",(0,l.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"if...else"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"repeat...until"),")\nare the same in Erde, with the exception of using braces instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"end"),". Erde\nadditionally adds a ",(0,l.kt)("inlineCode",{parentName:"p"},"continue")," statement and ",(0,l.kt)("inlineCode",{parentName:"p"},"try...catch")," construct."),(0,l.kt)("h3",{id:"do"},"do"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua Do Block")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"do {\n  ...\n}\n")),(0,l.kt)("h3",{id:"if-else"},"if else"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.1.html"},"Lua Do Block")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"if n > 0 {\n  ...\n} elseif n < 0 {\n  ...\n} else {\n  ...\n}\n")),(0,l.kt)("h3",{id:"for"},"for"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.4.html"},"Lua Numeric For Loop")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.5.html"},"Lua Generic For Loop")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"for i = 1, 10, 1 {\n  ...\n}\n\nfor i, v in ipairs({ 1, 2, 3 }) {\n  ...\n}\n")),(0,l.kt)("h3",{id:"while"},"while"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.2.html"},"Lua While Loop")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"while true {\n  ...\n}\n")),(0,l.kt)("h3",{id:"repeat--until"},"repeat ... until"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.3.html"},"Lua Repeat Until")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"repeat {\n  ...\n} until true\n")),(0,l.kt)("h3",{id:"try--catch"},"try ... catch"),(0,l.kt)("p",null,"Erde support ",(0,l.kt)("inlineCode",{parentName:"p"},"try...catch")," statements to catch errors thrown by Lua's ",(0,l.kt)("inlineCode",{parentName:"p"},"error"),"\nfunction. Under the hood it is simply a wrapper around ",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.4.html"},"pcall"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"try {\n  error('my error message')\n} catch err {\n  print(err) -- prints: my error message\n}\n")),(0,l.kt)("p",null,"The catch variable is optional and can be destructured if you are expecting a\ntable to be thrown:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- Destructured error\n\ntry {\n  error({ err = 'my error message' })\n} catch { err } {\n  print(err) -- prints: my error message\n}\n\n-- Ignored error\n\ntry {\n  error('my error message')\n} catch {\n  print('my custom error message') -- prints: my custom error message\n}\n")),(0,l.kt)("h3",{id:"continue"},"continue"),(0,l.kt)("p",null,"Erde adds the ",(0,l.kt)("inlineCode",{parentName:"p"},"continue")," keyword, which will advance to the next iteration of\nthe closest looping block (",(0,l.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"repeat...until"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"for i = 1, 10 {\n  if i % 2 == 0 {\n    continue\n  }\n\n  print('i is odd')\n}\n")),(0,l.kt)("h3",{id:"goto"},"goto"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/GotoStatement"},"Lua Goto")),(0,l.kt)("p",null,"Erde has support for the Lua's ",(0,l.kt)("inlineCode",{parentName:"p"},"goto")," statement available in Lua 5.2+. Note that\nthere is no way to mimic this behavior in 5.1, so trying to use ",(0,l.kt)("inlineCode",{parentName:"p"},"goto")," when\ntargeting 5.1+ will result in an error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"goto myJump\n\nprint('this is skipped')\n\n::myJump::\nprint('hello world')\n")),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.html"},"Lua Functions")),(0,l.kt)("p",null,"Function declarations are the same as Lua, but use braces instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"end"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local function sum(a, b) {\n  return a + b\n}\n")),(0,l.kt)("p",null,"As stated in ",(0,l.kt)("a",{parentName:"p",href:"#declarations--scopes"},"Declarations / Scopes"),", the scope of a\nfunction is optional and defaults to ",(0,l.kt)("em",{parentName:"p"},"local"),". Functions also support the\n",(0,l.kt)("a",{parentName:"p",href:"#module"},"module")," scope:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- This is a local function!\nfunction sum(a, b) {\n  return a + b\n}\n\n-- This is an exported function\nmodule function sum(a, b) {\n  return a + b\n}\n")),(0,l.kt)("h3",{id:"default-parameters"},"Default Parameters"),(0,l.kt)("p",null,"Erde has support for parameter defaults. Since all parameters in Lua are\noptional, any parameter in Erde may be assigned a default value. In particular,\ndefaulted parameters do not need to come after non-defaulted ones."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"function myfunc(a, b = 1, c) {\n  return a + b + c\n}\n\nmyfunc(1, nil, 3) -- 5\n")),(0,l.kt)("h3",{id:"varargs"},"Varargs"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.2.html"},"Lua Varargs")),(0,l.kt)("p",null,"Erde supports variadic arguments from Lua:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"function sum(...) {\n  local total = 0\n\n  for _, summand in ipairs({ ... }) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,l.kt)("p",null,"Additionally, Erde provides the ability to give variadic arguments a name, which\nwill place them into a table for you:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"function sum(...summands) {\n  local total = 0\n\n  for _, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,l.kt)("h3",{id:"arrow-functions"},"Arrow Functions"),(0,l.kt)("p",null,"Lua's anonymous function syntax (",(0,l.kt)("inlineCode",{parentName:"p"},"function() ... end"),") is not valid in Erde.\nInstead, Erde opts for arrow functions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local sum = (a, b) -> {\n  return a + b\n}\n")),(0,l.kt)("p",null,"Arrow functions can implicitly take ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," as the first parameter by using a\nfat arrow instead of a skinny one\n(",(0,l.kt)("a",{parentName:"p",href:"https://moonscript.org/reference/#the-language/function-literals/fat-arrows"},"inspired by MoonScript"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local Person = { name = 'world' }\n\nPerson.introduce = () => {\n  print(self.name)\n}\n")),(0,l.kt)("p",null,"Arrow function mays also specify an expression instead of a function body. In\nthis case, the expression becomes the return value. If multiple values are being\nreturned, the expression list needs to be wrapped in parentheses."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"-- Return single value\nlocal getRandomNumber = () -> math.random()\n\n-- Return multiple values (must use parentheses!)\nlocal getRandomNumbers = () -> (\n  math.random(),\n  math.random(),\n)\n")),(0,l.kt)("p",null,"The parameter parentheses are optional if there is only one parameter, as long\nas it does not have a default and is not variadic. This includes destructured\nparameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local greet = name -> print(\"hello {name}!\")\ngreet({ name = 'world' })\n\n-- w/ destructuring\nlocal greet = { name } -> print(\"hello {name}!\")\ngreet({ name = 'world' })\n\n-- not valid!\nlocal greet = ... -> print(...)\nlocal greet = name = 'bob' -> print(name)\n")),(0,l.kt)("h2",{id:"optional-chaining"},"Optional Chaining"),(0,l.kt)("p",null,"Erde supports a form of\n",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"},"optional chaining"),",\nwhich allows an index chain to shortcircuit w/ ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," instead of throwing an\n",(0,l.kt)("inlineCode",{parentName:"p"},"attempt to index nil value")," error."),(0,l.kt)("p",null,"An optional chain may be used by simply prefixing the index with a question mark\n(",(0,l.kt)("inlineCode",{parentName:"p"},"?"),"). It may be applied to key indices, number indices, and function calls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = nil\n\n-- these all print nil\nprint(a?.b)\nprint(a?[1])\nprint(a?())\n\n-- also works with methods\nprint(a?:b())\n")),(0,l.kt)("p",null,"You can also use optional chaining during assignment. In this case, the\nassignment will simply not occur if the chain ends early."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local person = { name = 'Bob' }\nperson.children?[1].name = 'Bobs Child'\nprint(person.children?[1].name) -- nil\n")),(0,l.kt)("h2",{id:"destructuring"},"Destructuring"),(0,l.kt)("p",null,"Erde supports a simple form of ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring"),",\nwhich is a convenient way to extract values from a table."),(0,l.kt)("p",null,"To extract keys from a table, you may specify a list of names in braces:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\n\n-- Destructure `a` to extract the `hello` property\n-- This is equivalent to `local hello = a.hello`\nlocal { hello } = a\n\nprint(hello) -- prints: world\n")),(0,l.kt)("p",null,"To extract from the array section of a table, you can use brackets:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = {\n  hello = 'world',\n  'first index',\n  'second index',\n}\n\n-- Destructure array elements. This is equivalent to: \n-- `local first = a[1]`\n-- `local second = a[2]`\nlocal [first, second] = a\n\nprint(first) -- prints: first index\nprint(second) -- prints: second index\n")),(0,l.kt)("p",null,"Destructured values may be given aliases or default values. Aliases simply\nrename the destructured field and default values are used to replace ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),". When\nusing both, aliases must come before defaults"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\n\n-- Alias\nlocal { hello: myHello } = a\nprint(myHello) -- prints: world\n\n-- Default\nlocal { world = 'default msg' } = a\nprint(world) -- prints: default msg\n\n-- Alias + Default\nlocal { world: myWorld = 'default msg' } = a\nprint(myWorld) -- prints: default msg\n")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Using aliases inside of array destructuring is invalid syntax, as every name is\nalready an alias."))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Unlike most languages, nested destructuring is ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"not"))," supported. This is\nintentional, as nested destructuring syntax makes code more cryptic and\ndifficult to read."))))}c.isMDXComponent=!0}}]);