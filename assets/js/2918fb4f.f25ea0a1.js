"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[537],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=r,g=d["".concat(p,".").concat(c)]||d[c]||u[c]||l;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1844:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={},i="Reference",o={unversionedId:"reference",id:"reference",title:"Reference",description:"This reference assumes previous knowledge of Lua.",source:"@site/src/docs/reference.md",sourceDirName:".",slug:"/reference",permalink:"/reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/getting-started"},next:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"}},p={},s=[{value:"Comments",id:"comments",level:2},{value:"Types",id:"types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"Tables",id:"tables",level:3},{value:"Functions",id:"functions",level:3},{value:"Parameters Defaults",id:"parameters-defaults",level:4},{value:"Varargs",id:"varargs",level:4},{value:"Arrow Functions",id:"arrow-functions",level:4},{value:"Scopes",id:"scopes",level:2},{value:"local",id:"local",level:3},{value:"global",id:"global",level:3},{value:"module",id:"module",level:3},{value:"Operators",id:"operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Concatenation / Length Operators",id:"concatenation--length-operators",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Logic Constructs",id:"logic-constructs",level:2},{value:"Do Block",id:"do-block",level:3},{value:"If Else",id:"if-else",level:3},{value:"For Loop",id:"for-loop",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"Repeat Until",id:"repeat-until",level:3},{value:"Try Catch",id:"try-catch",level:3},{value:"Continue Statements",id:"continue-statements",level:3},{value:"Goto",id:"goto",level:3},{value:"Destructuring",id:"destructuring",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"Trailing Commas",id:"trailing-commas",level:3},{value:"Semicolons",id:"semicolons",level:3},{value:"Return Parentheses",id:"return-parentheses",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reference"},"Reference"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This reference assumes previous knowledge of ",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/"},"Lua"),".")),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.3.html"},"Lua Comments")),(0,r.kt)("p",null,"Comments are unchanged from Lua. Both line comments and block comments are\nsupported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- this is a single line comment\n\n--[[\n  this is a\n  block comment\n]]\n")),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," are unchanged from Lua."),(0,r.kt)("h3",{id:"numbers"},"Numbers"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.1"},"Lua 5.4"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.3/manual.html#3.1"},"Lua 5.3"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.2/manual.html#3.1"},"Lua 5.2"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.1/manual.html#2.1"},"Lua 5.1"),"\n(See 'numeric/numerical constant')"),(0,r.kt)("p",null,"Numbers are unchanged from Lua. However, since the syntax for numbers differs\nacross Lua versions (in particular, each version is either the same or a\nsuperset of the previous version) you should only use the syntax for the least\nsupported Lua version. If Erde detects that you are using a syntax that\nis not supported by your compilation targets, it will throw an error."),(0,r.kt)("p",null,"For example, trying to compile ",(0,r.kt)("inlineCode",{parentName:"p"},"0xA23p-4")," when targeting 5.1+ will cause\ncompilation errors, since hexadecimal exponents were not added until 5.2."),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.4.html"},"Lua Strings")),(0,r.kt)("p",null,"String are ",(0,r.kt)("em",{parentName:"p"},"mostly")," unchanged from Lua. Erde additionally allows for string\ninterpolation inside of double quote or block strings (but not single quote\nstrings!) using braces. Braces may be escaped to be used literally and escaping\nthe end brace is optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},'local msg = \'world\'\n\nprint(\'hello {msg}\') -- hello {msg}\nprint("hello {msg}") -- hello world\nprint([[hello {msg}]]) -- hello world\n\n-- equivalent\nprint("hello \\{msg}") -- hello {msg}\nprint("hello \\{msg\\}") -- hello {msg}\n')),(0,r.kt)("h3",{id:"tables"},"Tables"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/2.5.html"},"Lua Tables")),(0,r.kt)("p",null,"Tables are unchanged from Lua."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world', 'hello world' }\nlocal b = { ...a }\nprint(b.hello) -- world\nprint(b[1]) -- hello world\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.html"},"Lua Functions")),(0,r.kt)("p",null,"Function declarations are the same as Lua, but use braces instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local function sum(a, b) {\n  return a + b\n}\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Unlike Lua, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"functions declarations are local by default")),". You can read\nmore about this ",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#local-functions-by-default"},"here"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- This is a local function!\nfunction sum(a, b) {\n  return a + b\n}\n"))),(0,r.kt)("h4",{id:"parameters-defaults"},"Parameters Defaults"),(0,r.kt)("p",null,"Erde has support for parameter defaults:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"function greet(name = 'world') {\n  return 'hello ' .. name\n}\n\ngreet() -- hello world\n")),(0,r.kt)("p",null,"Since all parameters in Lua are optional, any parameter in Erde may be assigned\na default value. In particular, defaulted parameters need not come after\nnon-defaulted ones:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"function myfunc(a, b = 2, c) {\n  return a + b + c\n}\n\nmyfunc(1, nil, 3) -- 6\n")),(0,r.kt)("h4",{id:"varargs"},"Varargs"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/5.2.html"},"Lua Varargs")),(0,r.kt)("p",null,"Erde supports variadic arguments from Lua:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"function sum(...) {\n  local summands = { ... }\n  local total = 0\n\n  for _, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,r.kt)("p",null,"Additionally, Erde allows for named varargs, which will place them into a table\nfor you:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"function sum(...summands) {\n  local total = 0\n\n  for _, summand in ipairs(summands) {\n    total += summand\n  }\n\n  return total\n}\n")),(0,r.kt)("h4",{id:"arrow-functions"},"Arrow Functions"),(0,r.kt)("p",null,"Lua's anonymous function syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"function() ... end"),") is not valid in Erde.\nInstead, Erde opts for arrow functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local sum = (a, b) -> {\n  return a + b\n}\n")),(0,r.kt)("p",null,"Arrow functions can implicitly take ",(0,r.kt)("inlineCode",{parentName:"p"},"self")," as the first parameter by using a\nfat arrow instead of a skinny one\n(",(0,r.kt)("a",{parentName:"p",href:"https://moonscript.org/reference/#the-language/function-literals/fat-arrows"},"inspired by MoonScript"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local Person = { name = 'world' }\n\nPerson.introduce = () => {\n  print(self.name)\n}\n")),(0,r.kt)("p",null,"Arrow function mays also specify an expression instead of a function body. In\nthis case, the expression becomes the return value. If multiple values are being\nreturned, the expression list needs to be wrapped in parentheses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- Return single value\nlocal getRandomNumber = () -> math.random()\n\n-- Return multiple values (must use parentheses!)\nlocal getRandomNumbers = () -> (\n  math.random(),\n  math.random(),\n)\n")),(0,r.kt)("p",null,"The parameter parentheses are optional if there is only one parameter, as long\nas it does not have a default and is not variadic. This also works for\n",(0,r.kt)("a",{parentName:"p",href:"#destructuring"},"destructured")," parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local greet = name -> print(\"hello {name}!\")\ngreet('world')\n\n-- w/ destructuring\nlocal greet = { name } -> print(\"hello {name}!\")\ngreet({ name = 'world' })\n")),(0,r.kt)("h2",{id:"scopes"},"Scopes"),(0,r.kt)("p",null,"Scopes apply to both normal declarations and function declarations. Their syntax\nis equivalent to Lua, although additional keywords have been added."),(0,r.kt)("h3",{id:"local"},"local"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua Local Variables")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," scope keyword is unchanged from Lua."),(0,r.kt)("h3",{id:"global"},"global"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/1.2.html"},"Lua Global Variables")),(0,r.kt)("p",null,"Global variables are unchanged from Lua. However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," scope keyword has\nbeen added for convenience. Its use is highly recommended, as it is much easier\nto find where the variable is declared."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"global MY_GLOBAL = 1\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Since ",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#local-functions-by-default"},"functions default to ",(0,r.kt)("inlineCode",{parentName:"a"},"local")," scope"),",\nglobal functions need to be explicitly declared as global:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"global function myGlobalFunction() {\n  ...\n}\n"))),(0,r.kt)("h3",{id:"module"},"module"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," scope keyword acts as an ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," statement. Anything declared with\n",(0,r.kt)("inlineCode",{parentName:"p"},"module")," will automatically be placed into a table, which is then returned at\nthe end of the script. It may only occur at the top level of a module and may\nnot be used in conjunction with ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function echo(msg) {\n  print(msg)\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local foo = require('foo')\nfoo.echo('hello world') -- hello world\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," keyword conflicts with the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," function in Lua 5.1,\nwhich means that the ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," function is not usable in Erde (although the use\nof Lua's ",(0,r.kt)("inlineCode",{parentName:"p"},"module")," function is ",(0,r.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/LuaModuleFunctionCritiqued"},"highly discouraged"),"\nanyways).")),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.1"},"Lua Arithmetic Operators")),(0,r.kt)("p",null,"Unchanged from Lua."),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"+"),(0,r.kt)("td",{parentName:"tr",align:"left"},"addition"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 2 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"subtraction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 - 2 == -1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},"unary minus"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"*"),(0,r.kt)("td",{parentName:"tr",align:"left"},"multiplication"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2 ","*"," 4 == 8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"/"),(0,r.kt)("td",{parentName:"tr",align:"left"},"division"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10 / 2 == 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"//"),(0,r.kt)("td",{parentName:"tr",align:"left"},"floor division"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10 // 4 == 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"^"),(0,r.kt)("td",{parentName:"tr",align:"left"},"exponentiation"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2 ^ 6 == 64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"%"),(0,r.kt)("td",{parentName:"tr",align:"left"},"modulo"),(0,r.kt)("td",{parentName:"tr",align:"left"},"6 % 2 == 0"))))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Floor division (",(0,r.kt)("inlineCode",{parentName:"p"},"//"),") was not introduced until Lua 5.3, but is simple enough\nthat the compiler will polyfill it for you where necessary.")),(0,r.kt)("h3",{id:"relational-operators"},"Relational Operators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.4"},"Lua Relational Operators")),(0,r.kt)("p",null,"Relational operators are the same as in Lua ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"with the exception of the NEQ\noperator")),", which uses ",(0,r.kt)("inlineCode",{parentName:"p"},"!="),". You can read more about this decision\n",(0,r.kt)("a",{parentName:"p",href:"/breaking-changes-lua#neq-operator--vs-"},"here"),"."),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"=="),(0,r.kt)("td",{parentName:"tr",align:"left"},"equality"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 1 == 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"!="),(0,r.kt)("td",{parentName:"tr",align:"left"},"inequality"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 + 1 != 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"<"),(0,r.kt)("td",{parentName:"tr",align:"left"},"less than"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3 < 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"greater than"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 > 7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"<="),(0,r.kt)("td",{parentName:"tr",align:"left"},"less than or equal"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 >= 8, 9 >= 9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},">="),(0,r.kt)("td",{parentName:"tr",align:"left"},"greater than or equal"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9 <= 11, 11 <= 11"))))),(0,r.kt)("h3",{id:"bitwise-operators"},"Bitwise Operators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Lua Bitwise Operators")),(0,r.kt)("p",null,"Erde supports bitwise operators and uses the same syntax as Lua 5.3+:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"|"),(0,r.kt)("td",{parentName:"tr",align:"right"},"or"),(0,r.kt)("td",{parentName:"tr",align:"right"},"4 ","|"," 2 == 6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"&"),(0,r.kt)("td",{parentName:"tr",align:"right"},"and"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5 == 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"xor"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 ~ 5 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"~4 == 3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},">>"),(0,r.kt)("td",{parentName:"tr",align:"right"},"right shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2 >> 1 == 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"<<"),(0,r.kt)("td",{parentName:"tr",align:"right"},"left shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2 << 1 == 4"))))),(0,r.kt)("br",null),(0,r.kt)("p",null,"Compiling bitwise operators heavily depends on the Lua target. Erde uses the\nfollowing table to determine how bit operations should be compiled:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Target"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Compilation"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Input Example"),(0,r.kt)("th",{parentName:"tr",align:null},"Output Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"jit"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"http://bitop.luajit.org/"},"LuaBitOp")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.1"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"http://bitop.luajit.org/"},"LuaBitOp")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.1+"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Requires ",(0,r.kt)("inlineCode",{parentName:"td"},"--bitLib")," flag"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('myBitLib').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.2"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.2/manual.html#6.7"},"bit32")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('bit32').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.2+"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Requires ",(0,r.kt)("inlineCode",{parentName:"td"},"--bitLib")," flag"),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"require('myBitLib').band(6, 5)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.3"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.3/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.3+"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.3/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.4"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"5.4+"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"td",href:"https://www.lua.org/manual/5.4/manual.html#3.4.2"},"Native Syntax")),(0,r.kt)("td",{parentName:"tr",align:"right"},"6 & 5"),(0,r.kt)("td",{parentName:"tr",align:null},"6 & 5"))))),(0,r.kt)("br",null),(0,r.kt)("p",null,"You may also specify your own bit library using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--bitLib")," flag in the CLI.\nIn this case, the library methods are assumed to be:"),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Method"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"|"),(0,r.kt)("td",{parentName:"tr",align:"right"},"or"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"&"),(0,r.kt)("td",{parentName:"tr",align:"right"},"and"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').band")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"xor"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bxor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"~"),(0,r.kt)("td",{parentName:"tr",align:"right"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').bnot")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},">>"),(0,r.kt)("td",{parentName:"tr",align:"right"},"right shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').rshift")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"<<"),(0,r.kt)("td",{parentName:"tr",align:"right"},"left shift"),(0,r.kt)("td",{parentName:"tr",align:"right"},"require('myBitLib').lshift"))))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Trying to compile bitwise operators when targeting 5.1+ or 5.2+ ",(0,r.kt)("em",{parentName:"p"},"requires"),"\nthe use of ",(0,r.kt)("inlineCode",{parentName:"p"},"--bitLib"),'. This is because there really is no "sane" default here.\nBy far the most common bit libraries for Lua are\n',(0,r.kt)("a",{parentName:"p",href:"http://bitop.luajit.org/"},"LuaBitOp")," (only works on 5.1 and 5.2) and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.2/manual.html#6.7"},"bit32")," (only works on 5.2),\nso it is left to the developer to decide which library to use.")),(0,r.kt)("h3",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.5"},"Lua Logical Operators")),(0,r.kt)("p",null,"The logical operators in Erde are quite different than in Lua, but consistent\nwith most other programming languages."),(0,r.kt)("center",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"|","|"),(0,r.kt)("td",{parentName:"tr",align:"left"},"or"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true ","|","|"," false == true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"&&"),(0,r.kt)("td",{parentName:"tr",align:"left"},"and"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true && false == false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"!"),(0,r.kt)("td",{parentName:"tr",align:"left"},"unary NOT"),(0,r.kt)("td",{parentName:"tr",align:"left"},"!false == true"))))),(0,r.kt)("h3",{id:"concatenation--length-operators"},"Concatenation / Length Operators"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.6"},"Lua Concatenation Operator")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/manual/5.4/manual.html#3.4.7"},"Lua Length Operator")),(0,r.kt)("p",null,"Unchanged from Lua."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},'print("hello " .. "world") -- hello world\nprint(#"hello world") -- 11\n')),(0,r.kt)("h3",{id:"assignment-operators"},"Assignment Operators"),(0,r.kt)("p",null,"All binary operators (except of course ",(0,r.kt)("a",{parentName:"p",href:"#relational-operators"},"Relational Operators"),")\nsupport assignment operator shorthands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local x = 4\nx += 6\nx /= 2\nprint(x) -- 5\n")),(0,r.kt)("p",null,"Similar to regular assignments, assignment operators can also perform multiple\nassignments in a single statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local x, y, z = 0, 0, 0\nx, y, z += 1, 2, 3\nprint(x, y, z) -- 1 2 3\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Internally, Erde ",(0,r.kt)("em",{parentName:"p"},"must")," assign the expression list to temporary variables in\norder to ensure that functions with multiple returns do not get called more than\nonce. This causes a problem in the error message if the operation fails:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="Erde"',title:'"Erde"'},"local myMultiReturnFunc = () -> (1, nil, 3)\nlocal x, y, z = 0, 0, 0\n\nx, y, z += myMultiReturnFunc() -- error here from `y += nil`\n\nprint(x, y, z)\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Compiled Lua"',title:'"Compiled','Lua"':!0},"local myMultiReturnFunc = function() return 1, nil, 3 end\nlocal x, y, z = 0, 0, 0\n\nlocal tmpX, tmpY, tmpZ = myMultiReturnFunc()\nx = x + tmpX\ny = y + tmpY -- attempt to perform arithmetic on a nil value (local 'tmpY')\nz = z + tmpZ\n\nprint(x, y, z) -- 1 2 3\n")),(0,r.kt)("p",{parentName:"admonition"},"Lua's error message will reference the ",(0,r.kt)("em",{parentName:"p"},"temporary")," variable name (",(0,r.kt)("inlineCode",{parentName:"p"},"tmpY")," here),\nwhich doesn't actually appear in the source code. Unfortunately, there is not\nmuch to do about this without incurring a nontrivial amount of overhead, but I\nam open to suggestions for improvement here!")),(0,r.kt)("h2",{id:"logic-constructs"},"Logic Constructs"),(0,r.kt)("p",null,"All logic constructs in Lua (",(0,r.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repeat...until"),")\nare the same in Erde, with the exception of using braces for blocks instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},"end"),". Erde additionally adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," statement and ",(0,r.kt)("inlineCode",{parentName:"p"},"try...catch")," construct."),(0,r.kt)("p",null,"Erde also has support for ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," statements, but only when the compilation\ntarget also supports it (i.e. all targets other than 5.1 and 5.1+)."),(0,r.kt)("h3",{id:"do-block"},"Do Block"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.2.html"},"Lua Do Block")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"do {\n  ...\n}\n")),(0,r.kt)("h3",{id:"if-else"},"If Else"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.1.html"},"Lua If Else")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"if n > 0 {\n  ...\n} elseif n < 0 {\n  ...\n} else {\n  ...\n}\n")),(0,r.kt)("h3",{id:"for-loop"},"For Loop"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.4.html"},"Lua Numeric For Loop")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.5.html"},"Lua Generic For Loop")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- numeric for loop\nfor i = 1, 10, 1 {\n  ...\n}\n\n-- generic for loop\nfor i, v in ipairs({ 1, 2, 3 }) {\n  ...\n}\n")),(0,r.kt)("h3",{id:"while-loop"},"While Loop"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.2.html"},"Lua While Loop")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"while true {\n  ...\n}\n")),(0,r.kt)("h3",{id:"repeat-until"},"Repeat Until"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/4.3.3.html"},"Lua Repeat Until")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"repeat {\n  ...\n} until true\n")),(0,r.kt)("h3",{id:"try-catch"},"Try Catch"),(0,r.kt)("p",null,"Erde supports ",(0,r.kt)("inlineCode",{parentName:"p"},"try...catch")," statements to catch errors thrown by Lua's ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),"\nfunction. Under the hood, it is simply a wrapper around\n",(0,r.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.4.html"},"pcall"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"try {\n  error('my error message')\n} catch err {\n  print(err) -- my error message\n}\n")),(0,r.kt)("p",null,"The catch variable is optional and can be destructured if you are expecting a\ntable to be thrown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"try {\n  error('my error message')\n} catch {\n  print('my custom error message') -- my custom error message\n}\n\ntry {\n  error({ message = 'my error message' })\n} catch { message } {\n  print(message) -- my error message\n}\n")),(0,r.kt)("h3",{id:"continue-statements"},"Continue Statements"),(0,r.kt)("p",null,"Erde adds support for continue statements, which will advance to the next\niteration of the closest looping block (",(0,r.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repeat...until"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"for i = 1, 10 {\n  if i % 2 == 0 {\n    continue\n  }\n\n  print('i is odd')\n}\n")),(0,r.kt)("h3",{id:"goto"},"Goto"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://lua-users.org/wiki/GotoStatement"},"Lua Goto")),(0,r.kt)("p",null,"Erde has support for the Lua's ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," statement (added in Lua 5.2). Note that\nthere is no way to mimic this behavior in 5.1, so trying to use ",(0,r.kt)("inlineCode",{parentName:"p"},"goto")," when\ntargeting 5.1 or 5.1+ will result in a compilation error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"goto myJump\n\nprint('this will not be printed')\n\n::myJump::\nprint('hello world')\n")),(0,r.kt)("h2",{id:"destructuring"},"Destructuring"),(0,r.kt)("p",null,"Erde supports a simple form of\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring"),",\nwhich is a convenient way to extract values from a table."),(0,r.kt)("p",null,"To extract keys from a table, you may specify a list of names in braces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\n\n-- equivalent to: `local hello = a.hello`\nlocal { hello } = a\n\nprint(hello) -- world\n")),(0,r.kt)("p",null,"To extract from the array section of a table, you can use brackets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local a = {\n  hello = 'world',\n  'first index',\n  'second index',\n}\n\n-- equivalent to: \n-- `local first = a[1]`\n-- `local second = a[2]`\nlocal [first, second] = a\n\nprint(first) -- first index\nprint(second) -- second index\n")),(0,r.kt)("p",null,"Destructured values may be given aliases or default values. Aliases simply\nrename the destructured field and default values are applied to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),"\nvalues. When using both, aliases must come before defaults:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"local a = { hello = 'world' }\n\n-- Alias\nlocal { hello: myHello } = a\nprint(myHello) -- world\n\n-- Default\nlocal { someNonExistentKey = 'goodbye' } = a\nprint(someNonExistentKey) -- goodbye\n\n-- Alias + Default\nlocal { someNonExistentKey: myAlias = 'James Bond' } = a\nprint(myAlias) -- James Bond\n")),(0,r.kt)("p",null,"Destructuring is especially useful in combination with the ",(0,r.kt)("a",{parentName:"p",href:"#module"},"module"),"\nscope keyword, as it allows us to achieve the import / export paradigm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="foo.erde"',title:'"foo.erde"'},"module function myModuleFunction() {\n  print('hello world')\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde",metastring:'title="bar.erde"',title:'"bar.erde"'},"local { myModuleFunction } = require('foo')\nmyModuleFunction() -- hello world\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Using aliases inside of array destructuring is invalid syntax, as every name is\nalready an alias.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Unlike other languages, nested destructuring is ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"not"))," supported. This is\nintentional, as nested destructuring syntax often makes code much more cryptic\nand difficult to read.")),(0,r.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,r.kt)("h3",{id:"trailing-commas"},"Trailing Commas"),(0,r.kt)("p",null,"Erde is much more lenient than Lua in allowing the presence of trailing commas.\nAny enclosed list (i.e. surrounded by paired tokens such as ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),")\nis allowed to have trailing commas. Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Function declaration parameters"),(0,r.kt)("li",{parentName:"ul"},"Function call parameters"),(0,r.kt)("li",{parentName:"ul"},"Destructures"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#return-parentheses"},"Return Parentheses"))),(0,r.kt)("p",null,"The lack of trailing commas in Lua's function call parameters was a particular\npain point for me. For example, the following is valid in Erde, but invalid in\nLua:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"print(\n  'this is the first line to print',\n  'this is the second line to print',\n  'this is the third line to print', -- trailing comma!\n)\n")),(0,r.kt)("h3",{id:"semicolons"},"Semicolons"),(0,r.kt)("p",null,"Erde supports using semicolons to separate statements. In Lua, this is most\ncommonly used to avoid the following ambiguous syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local x = y\n(function() print('hello world') end)()\n\n-- can be interpreted as either:\nlocal x = y;\n(function() print('hello world') end)()\n\n-- or:\nlocal x = y(function() print('hello world') end)()\n")),(0,r.kt)("p",null,"While you can still use a semicolon to differentiate these statements in Erde,\nErde will also try to infer the user's intention based on the presence of\nnewlines. If there is a newline before the ambiguous parentheses, it is parsed\nas a separate statement, otherwise it is parsed as a function call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"-- parsed as two separate statements\nlocal x = y\n(() -> print('hello world'))()\n\n-- parsed as one statement (back-to-back function calls)\nlocal x = y(() -> print('hello world'))()\n")),(0,r.kt)("h3",{id:"return-parentheses"},"Return Parentheses"),(0,r.kt)("p",null,"Unlike Lua, functions in Erde are allowed to wrap their returns in parentheses.\nThis makes functions that return multiple expressions a little more readable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erde"},"function getBasicPairOperations(a, b) {\n  return (\n    a + b,\n    a - b,\n    a * b,\n    a / b,\n  )\n}\n")))}u.isMDXComponent=!0}}]);