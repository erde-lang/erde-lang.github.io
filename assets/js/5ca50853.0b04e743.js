"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[9589],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(c,".").concat(m)]||d[m]||s[m]||l;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},44077:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return s}});var r=t(87462),a=t(63366),l=(t(67294),t(3905)),o=["components"],i={slug:"/",sidebar_position:1},c="Getting Started",u={unversionedId:"installation",id:"installation",title:"Getting Started",description:"Installation",source:"@site/src/docs/installation.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",sidebar_position:1},sidebar:"sidebar",next:{title:"Breaking Changes w/ Lua",permalink:"/docs/breaking-changes-lua"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Running Programs",id:"running-programs",level:2},{value:"Compiling Programs",id:"compiling-programs",level:2},{value:"Cleaning Projects",id:"cleaning-projects",level:2}],d={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"getting-started"},"Getting Started"),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"The recommended way to install is through ",(0,l.kt)("a",{parentName:"p",href:"https://luarocks.org/modules/bsuth/erde"},"luarocks"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"luarocks install erde\n")),(0,l.kt)("p",null,"Alternatively you can clone the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/erde-lang/erde"},"repo")," and\nupdate your PATH and ",(0,l.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.1.html"},"LUA_PATH")," accordingly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/erde-lang/erde.git\nERDE_ROOT="$(pwd)/erde"\nexport LUA_PATH="$ERDE_ROOT/?/init.lua;$LUA_PATH"\nexport PATH="$ERDE_ROOT/bin:$PATH"\n')),(0,l.kt)("p",null,"You can check whether Erde is installed correctly by running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"erde -v\n")),(0,l.kt)("h2",{id:"running-programs"},"Running Programs"),(0,l.kt)("p",null,"First, we need to create an Erde file, which uses the ",(0,l.kt)("inlineCode",{parentName:"p"},".erde")," extension:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"touch fibonacci.erde\n")),(0,l.kt)("p",null,"And add some test code to it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-erde"},"function fibonacci(n) {\n  local a = 0\n  local b = 1\n\n  for i = 1, n {\n    local tmp = a\n    a = b\n    b = tmp + a\n    print(b)\n  }\n}\n\nfibonacci(10)\n")),(0,l.kt)("p",null,"Finally, we can run the file from the cli using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"erde fibonacci.erde\n")),(0,l.kt)("h2",{id:"compiling-programs"},"Compiling Programs"),(0,l.kt)("p",null,"Running ",(0,l.kt)("inlineCode",{parentName:"p"},".erde")," files directly is great for development, but for production code\nwe want to distribute ",(0,l.kt)("inlineCode",{parentName:"p"},".lua")," files instead. We can compile our previous file\ninto Lua using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"erde compile fibonacci.erde\n")),(0,l.kt)("p",null,"This should create a ",(0,l.kt)("inlineCode",{parentName:"p"},"fibonacci.lua")," file in the same directory."),(0,l.kt)("h2",{id:"cleaning-projects"},"Cleaning Projects"),(0,l.kt)("p",null,"If you look at the generated code in ",(0,l.kt)("inlineCode",{parentName:"p"},"fibonacci.lua"),", you will notice a comment\nat the top:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"-- __ERDE_COMPILED__\nlocal fibonacci\nfunction fibonacci(n)\n  local a = 0;\n  local b = 1;\n  for i=1,n do\n    local tmp = a;\n    a = b;\n    b = tmp + a;\n    print(b);\n  end;\nend;\nfibonacci(10);\n...\n")),(0,l.kt)("p",null,"Erde will automatically inject this comment at the top of generated code. This\nallows erde to track which files in the current directory have been generated\nand allow us to clean them up using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"erde clean\n")),(0,l.kt)("p",null,"This also works w/ shebangs (",(0,l.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env lua"),"). In this case, the comment\nwill be placed ",(0,l.kt)("em",{parentName:"p"},"below")," the shebang."))}m.isMDXComponent=!0}}]);