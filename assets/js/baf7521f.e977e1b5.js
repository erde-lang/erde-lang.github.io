"use strict";(self.webpackChunkerde_lang_github_io=self.webpackChunkerde_lang_github_io||[]).push([[723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,l(l({ref:t},s),{},{components:n})):r.createElement(g,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8318:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},l="Getting Started",o={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Installation",source:"@site/src/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/getting-started",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/"},next:{title:"Breaking Changes w/ Lua",permalink:"/breaking-changes-lua"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Running Programs",id:"running-programs",level:2},{value:"Compiling Programs",id:"compiling-programs",level:2},{value:"Cleaning Projects",id:"cleaning-projects",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"The recommended way to install is through ",(0,a.kt)("a",{parentName:"p",href:"https://luarocks.org/modules/bsuth/erde"},"luarocks"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"luarocks install erde\n")),(0,a.kt)("p",null,"Alternatively you can clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/erde-lang/erde"},"repo")," and\nupdate your PATH and ",(0,a.kt)("a",{parentName:"p",href:"https://www.lua.org/pil/8.1.html"},"LUA_PATH")," accordingly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/erde-lang/erde.git\nERDE_ROOT="$(pwd)/erde"\nexport PATH="$ERDE_ROOT/bin:$PATH"\nexport LUA_PATH="$ERDE_ROOT/?/init.lua;$LUA_PATH"\n')),(0,a.kt)("p",null,"Erde comes with 2 executables: ",(0,a.kt)("inlineCode",{parentName:"p"},"erde")," for running files and ",(0,a.kt)("inlineCode",{parentName:"p"},"erdec")," for\ncompiling files. You can check whether Erde is installed correctly by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"erde -v\nerdec -v\n")),(0,a.kt)("h2",{id:"running-programs"},"Running Programs"),(0,a.kt)("p",null,"Create an Erde file, which uses the ",(0,a.kt)("inlineCode",{parentName:"p"},".erde")," extension:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"touch fibonacci.erde\n")),(0,a.kt)("p",null,"And add some code to it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-erde"},"function fibonacci(n) {\n  local a, b = 0, 1\n\n  for i = 1, n {\n    a, b = b, a + b\n    print(b)\n  }\n}\n\nfibonacci(10)\n")),(0,a.kt)("p",null,"Now we can run the file from the command line using the ",(0,a.kt)("inlineCode",{parentName:"p"},"erde"),"\ncommand:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"erde fibonacci.erde\n")),(0,a.kt)("h2",{id:"compiling-programs"},"Compiling Programs"),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},".erde")," files directly is great for development, but for production code\nwe want to distribute ",(0,a.kt)("inlineCode",{parentName:"p"},".lua")," files instead. We can compile our previous file\ninto Lua using the ",(0,a.kt)("inlineCode",{parentName:"p"},"erdec")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"erdec fibonacci.erde\n")),(0,a.kt)("p",null,"This will create a ",(0,a.kt)("inlineCode",{parentName:"p"},"fibonacci.lua")," file in the same directory. "),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You can run the compiled file with the ",(0,a.kt)("inlineCode",{parentName:"p"},"lua")," interpreter as a sanity check to\nmake sure the output is the same:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"lua fibonacci.lua\n"))),(0,a.kt)("h2",{id:"cleaning-projects"},"Cleaning Projects"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},".lua")," files are generated next to their ",(0,a.kt)("inlineCode",{parentName:"p"},".erde")," counterparts in\norder to ensure ",(0,a.kt)("inlineCode",{parentName:"p"},"require")," resolutions are consistent. While this is great for\ndistribution, it clutters the directory and can feel somewhat noisy for\ndevelopment."),(0,a.kt)("p",null,"Erde keeps track of which files it has generated by injecting a special comment\nat the top of the file. This allows us to be able to clean all generated files\nusing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"erdec --clean\n")),(0,a.kt)("p",null,"By default this will clean all generated files in the current directory tree."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For those who may be wondering how Erde handles shebangs, Erde will inject\nthe comment ",(0,a.kt)("em",{parentName:"p"},"after")," the shebang during compilation and actually checks the first\n",(0,a.kt)("em",{parentName:"p"},"two")," lines of a file during cleaning.")))}u.isMDXComponent=!0}}]);